{"version":3,"sources":["pages/Dashboard.js","web3.js","constants.js","api.js"],"names":["connect","state","statistics","props","React","useState","activeStep","setActiveStep","open","setOpen","snackbar","setSnackbar","network","setNetwork","modalTitle","setModalTitle","modalDes","setModalDes","subMethod","setSubMethod","lockAmount","setLockAmount","undefined","withdrawDate","setWithdrawDate","dateUseful","setDateUseful","isAllowed","setIsAllowed","lockAmountMax","setLockAmountMax","theme","useTheme","classes","useStyles","pools","mobileClasses","mobile","dashboardClasses","dashboard","isMobile","useMediaQuery","userBalance","useSelector","token","tokenData","data","tokenLists","dispatch","useDispatch","useWeb3React","account","connector","tokenAddress","values","setValues","useEffect","getData","then","newData","type","TOKENLISTS","payload","interval","setInterval","clearInterval","a","address","getTokenBalance","tokenBalance","USERBALANCE","allowance","allowanceAmount","handleChange","event","target","value","length","getTokenMetadata","CHAINDATA","find","item","name","chain","TOKENDATA","handleOpen","handleClose","depositToken","tokenAmount","toString","BigInt","Math","pow","decimals","unlockDate","getProvider","provider","deposit","status","approveToken","approve","showLockup","history","push","networkData","subtitle","url","subData","subTitle","Row","nextUnlock","index","row","lockedTokenAmount","lockedLiquidity","currentTime","Date","now","map","each","timestamp","isWithdrawn","isLiquidity","amount","sx","borderBottom","component","scope","style","cursor","onClick","symbol","text","onCopy","title","align","toFixed","toDateString","variant","color","width","className","root","maxWidth","paddingLeft","paddingRight","info","container","direction","justifyContent","alignItems","marginTop","xs","sm","md","display","textAlign","href","explorer","lockerAddress","underline","button","cardHeader","src","defaultValue","axis","onChangeIndex","step","networkSelector","padding","border","borderRadius","networkImage","alt","networkTitle","networkDes","height","backgroundColor","fillCircle","emptyCircle","m","htmlFor","id","onChange","endAdornment","position","showPassword","onMouseDown","preventDefault","edge","label","margin","textLeft","tokenImage","tokenTitle","textRight","prevActiveStep","balanceContainer","InputLabelProps","shrink","inputprops","min","InputProps","e","parseFloat","marginBottom","fontSize","dateAdapter","AdapterDateFns","renderInput","currentDate","console","log","handleDate","disabled","mobileStepper","steps","nextButton","size","maxSteps","backButton","Paper","onClose","top","left","transform","bgcolor","boxShadow","p","mt","autoHideDuration","message","swapTokenLockerFactory","airdropAddress","serverApi","date","UTCTimestamp","round","getTime","web3","Web3","contract","eth","Contract","lockerContractAbi","methods","feesInETH","call","feeInETH","send","from","result","withdraw","erc20Abi","utils","toBN","deployedContract","axios","get","response","lockerDataByWallet","checkWalletAddress","walletAddress","isAddress","getLastDeployedContract","lastDeployedAddress","deployContract","abi","createTokenLocker","sendTokenVesting","csvData","_users","_amounts","_lockHours","_sendAmount","period","slice","sendLockTokenMany","getClaimTokenList","factoryContract","getAllContracts","allContracts","multicall","Multicall","web3Instance","tryAggregate","contractCallContext","reference","contractAddress","calls","methodName","methodParameters","returnData","Object","entries","results","key","callsReturnContext","returnValues","hex","claimedAmount","lockTimestamp","lastUpdated","lockHours","claimToken","tokenDetail","currentTimestamp","floor","reason","passedHours","availableAmount","airdrop","TOKENADDRESS","apiConfig","headers","serverUrl","_chain","_tokenAddress","tokenMetadata"],"mappings":"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","file":"static/js/11.2c006c4e.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nimport { useTheme } from '@mui/material/styles';\r\nimport {connect, useSelector, useDispatch} from 'react-redux';\r\nimport {useWeb3React} from \"@web3-react/core\";\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\r\n\r\n// ** Import Material UI Components\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\n\r\nimport Container from \"@mui/material/Container\";\r\n\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardHeader from \"@mui/material/CardHeader\";\r\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\r\nimport Modal from '@mui/material/Modal';\r\nimport {  RadioGroup } from \"@mui/material\";\r\nimport MobileStepper from '@mui/material/MobileStepper';\r\nimport Button from '@mui/material/Button';\r\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Search from '@mui/icons-material/Search';\r\nimport { Snackbar } from \"@mui/material\";\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport DateTimePicker from '@mui/lab/DateTimePicker';\r\nimport CheckIcon from '@mui/icons-material/Check';\r\nimport { TextField, Table, TableHead, TableBody, TableRow, TableCell, TableContainer, Paper, Box, IconButton } from \"@mui/material\";\r\n// import KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\n// import KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport Link from \"@mui/material/Link\";\r\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\r\nimport { Tooltip } from \"@mui/material\";\r\n\r\nimport useStyles from \"../assets/styles\";\r\n\r\nimport { TOKENDATA, USERBALANCE, TOKENLISTS } from \"../redux/constants\";\r\n\r\nimport {  CHAINDATA } from \"../constants\";\r\nimport { getTokenMetadata } from \"../api\";\r\nimport { deposit, approve, allowance, getTokenBalance, getData, lockerAddress, explorer } from \"../web3\"\r\n\r\nconst Dashboard = (props) => {\r\n\r\n    const [activeStep, setActiveStep] = React.useState(0);\r\n    const [open, setOpen] = React.useState(false);\r\n    const [snackbar, setSnackbar] = React.useState(false);\r\n    const [network, setNetwork] = useState(\"Avalanche\");\r\n    const [modalTitle, setModalTitle] = useState(\"\");\r\n    const [modalDes, setModalDes] = useState(\"\");\r\n    const [subMethod, setSubMethod] = useState(\"Project Tokens\"); \r\n    const [lockAmount, setLockAmount] = useState(0);\r\n    const [withdrawDate, setWithdrawDate] = useState(undefined);\r\n    const [dateUseful, setDateUseful] = useState(false);\r\n    const [isAllowed, setIsAllowed] = useState(0);// 0: checking, 1: not allowed, 2: allowed\r\n    const [lockAmountMax, setLockAmountMax] = useState(false);\r\n    const maxSteps = 4;\r\n    const theme = useTheme();\r\n    const classes = useStyles.pools();\r\n    const mobileClasses = useStyles.mobile();\r\n    const dashboardClasses = useStyles.dashboard();\r\n    const isMobile = useMediaQuery(\"(max-width:600px)\");\r\n    const userBalance = useSelector(state => state.userBalance);\r\n    const token = useSelector(state => state.tokenData);\r\n    const data = useSelector(state => state.tokenLists);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const style = {\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: 400,\r\n        bgcolor: 'background.paper',\r\n        border: '2px solid #fff',\r\n        borderRadius:'10px',\r\n        boxShadow: 24,\r\n        p: 4,\r\n    };\r\n\r\n    const { account, connector } = useWeb3React();\r\n\r\n    const [values, setValues] = React.useState({\r\n        tokenAddress:\"\",\r\n    });\r\n\r\n    const selectToken = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1)\r\n    }\r\n\r\n    const handleNext = () => {\r\n        if (activeStep == 0) {\r\n            if (account === undefined) {\r\n                setModalTitle(\"Please connect Wallet\");\r\n                setModalDes(`Before you can create a lock on ${network}, you must connect your wallet to ${network} network on your wallet. Use testnet for test transactions, and mainnet for real token locks.`);\r\n                handleOpen();\r\n            }else {\r\n                setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n            }\r\n        }else if(activeStep ==2) {\r\n            if (token.symbol == undefined) {\r\n                setModalTitle(\"Please select Token\");\r\n                setModalDes(`Before you can create a lock on ${network}, you must select token on your wallet. Use testnet for test transactions, and mainnet for real token locks.`);\r\n                handleOpen();\r\n            }else {\r\n                \r\n                setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n            }\r\n        }else {\r\n            setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!account) return;\r\n        getData(account).then(newData => {\r\n            dispatch({type:TOKENLISTS, payload: newData});\r\n        });\r\n        const interval = setInterval(() => {\r\n            getData(account).then(newData => {\r\n                dispatch({type:TOKENLISTS, payload: newData});\r\n            });\r\n        }, 5000);\r\n        return () => clearInterval(interval);\r\n    }, [account])\r\n\r\n    useEffect(async () => {\r\n        setIsAllowed(0);\r\n        if (!account || !token.address) return;\r\n        const tokenBalance = await getTokenBalance(token, account);\r\n        dispatch({type:USERBALANCE, payload: tokenBalance});\r\n        const allowanceAmount = await allowance(token, account);\r\n        if (allowanceAmount < 115792089237316195423570985008687907853269984665640564039457584007913129639935) setIsAllowed(1);\r\n        else setIsAllowed(2);\r\n    }, [account, token, connector])\r\n\r\n    const handleChange = async (event) => {\r\n        setValues({ tokenAddress: event.target.value });\r\n        if (event.target.value.length == 42) {\r\n            const address = event.target.value;\r\n            try {\r\n                const tokenData = await getTokenMetadata(CHAINDATA.find((item)=>item.name==network).chain, address);\r\n                dispatch({\r\n                    type:TOKENDATA,\r\n                    payload: tokenData[0]\r\n                })\r\n            } catch(e) {\r\n                dispatch({\r\n                    type:TOKENDATA,\r\n                    payload: {}\r\n                })\r\n            }\r\n        }else {\r\n            dispatch({\r\n                type:TOKENDATA,\r\n                payload: {}\r\n            })\r\n        }\r\n    };\r\n    \r\n    const handleClickSearch = () => {\r\n        setValues({\r\n            ...values,\r\n            showPassword: !values.showPassword,\r\n        });\r\n    };\r\n    \r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n    };\r\n    \r\n    const handleBack = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    };\r\n    \r\n    const handleStepChange = (step) => {\r\n        setActiveStep(step);\r\n    };\r\n\r\n    const selectLockAmountMax = () => {\r\n        setLockAmount(userBalance / Math.pow(10, token.decimals));\r\n        setLockAmountMax(true);\r\n    }\r\n    const handleLockAmount = (e) => {\r\n        setLockAmount(parseFloat(e.target.value));\r\n        setLockAmountMax(false);\r\n    }\r\n\r\n    const handleOpen = () => setOpen(true);\r\n    const handleClose = () => setOpen(false);\r\n\r\n    const handleSnackbarClose = () => setSnackbar(false);\r\n    const handleSnackbarOpen = () => setSnackbar(true);\r\n\r\n    const handleDate = (value) => {\r\n        setWithdrawDate(value)\r\n        const currentDate = new Date();\r\n        console.log(value > currentDate)\r\n        if (value > currentDate) setDateUseful(true);\r\n        else setDateUseful(false);\r\n        setWithdrawDate(value);\r\n    }\r\n\r\n    const depositToken = async () => {\r\n        let tokenAmount;\r\n        if (lockAmountMax) tokenAmount = userBalance.toString()\r\n        else tokenAmount = BigInt(lockAmount * Math.pow(10, token.decimals)).toString();\r\n        let unlockDate = withdrawDate;\r\n        let provider = await connector.getProvider()\r\n        deposit(provider, token, tokenAmount, unlockDate, account).then(async (status) => {\r\n            // if (status) console.log(\"deposited\");\r\n            const newData = await getData(account);\r\n            dispatch({type:TOKENLISTS, payload: newData});\r\n            setActiveStep(0);\r\n            dispatch({\r\n                type:TOKENDATA,\r\n                payload: {}\r\n            })\r\n            setWithdrawDate(undefined);\r\n            setDateUseful(false);\r\n        })\r\n    }\r\n\r\n    const approveToken = async () => {\r\n        let provider = await connector.getProvider()\r\n        approve(provider, token, account).then((status) => {\r\n            if (status) setIsAllowed(2);\r\n        });\r\n    }\r\n\r\n    const showLockup = async (tokenAddress) => {\r\n        props.history.push(`/lockup/${account}/${tokenAddress}`);\r\n    }\r\n\r\n    const networkData= [\r\n        {name:\"Avalanche\", subtitle:\"Choose if your coin is built on AVAX\", url:\"/networks/avalanche.png\", subData:[{name:\"Project Tokens\", subTitle:\"Regular BEP-20 Project Token\", url:\"/project.png\"}]},\r\n        // {name:\"Ethereum\", subtitle:\"Choose if your coin is built on Ethereum\", url:\"/networks/ethereum.png\", subData:[{name:\"Project Tokens\", subTitle:\"Regular BEP-20 Project Token\", url:\"/project.png\"}]},\r\n        // {name:\"Binance Smart Chain\", subtitle:\"Choose if your coin is built on Binance Smart Chain\", url:\"/networks/binance.png\", subData:[{name:\"Project Tokens\", subTitle:\"Regular BEP-20 Project Token\", url:\"/project.png\"}]}\r\n\r\n    ];\r\n\r\n    const Row = (props) => {\r\n        const { index, row } = props;\r\n        let nextUnlock, lockedTokenAmount = 0, lockedLiquidity = false;\r\n        const currentTime = Date.now();\r\n        row.data.map(each => {\r\n            if (each.timestamp > currentTime / 1000) {\r\n                if (!nextUnlock) nextUnlock = each.timestamp;\r\n                else if (nextUnlock > each.timestamp) nextUnlock = each.timestamp;\r\n            }\r\n            if (!each.isWithdrawn && !each.isLiquidity) lockedTokenAmount += each.amount / Math.pow(10, each.decimals);\r\n            if (!each.isWithdrawn && each.isLiquidity) lockedLiquidity = true;\r\n        })\r\n        // const [open, setOpen] = React.useState(false);\r\n        return (\r\n            <>\r\n                <TableRow\r\n                // sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                sx={{ '& > *': { borderBottom: 'unset' } }}\r\n                > \r\n                    {/* <TableCell>\r\n                        <IconButton\r\n                        aria-label=\"expand row\"\r\n                        size=\"small\"\r\n                        onClick={() => setOpen(!open)}\r\n                        >\r\n                        {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n                        </IconButton>\r\n                    </TableCell> */}\r\n                    <TableCell>\r\n                        {index + 1}\r\n                    </TableCell>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                        <span style={{cursor: \"pointer\"}} onClick={()=>showLockup(row.token.address)}>{row.token.symbol}</span>\r\n                        <CopyToClipboard text={row.token.address} onCopy={()=>handleSnackbarOpen(true)}>\r\n                            <Tooltip title=\"copy\">\r\n                                <IconButton>\r\n                                    <ContentCopyIcon/>\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </CopyToClipboard>\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">{lockedTokenAmount.toFixed(2)}</TableCell>\r\n                    <TableCell align=\"right\">{lockedLiquidity && <CheckIcon />}</TableCell>\r\n                    <TableCell align=\"right\">\r\n                        {nextUnlock ? new Date(nextUnlock).toDateString() : ''}\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                        <Button variant=\"contained\" color=\"secondary\" style={{width: '100%'}}  onClick={() => showLockup(row.token.address)}>View</Button>\r\n                    </TableCell>\r\n                </TableRow>\r\n                {/* <TableRow>\r\n                    <TableCell colSpan={2}></TableCell>\r\n                    <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={4}>\r\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                        <Box sx={{ margin: 1 }}>\r\n                            <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                                History\r\n                            </Typography>\r\n                            <Table size=\"small\" aria-label=\"purchases\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>Withdrawable Date</TableCell>\r\n                                        <TableCell align=\"right\">Amount</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                {row.vesting.map((vestingRow) => (\r\n                                    <TableRow key={vestingRow[0]}>\r\n                                        <TableCell component=\"th\" scope=\"row\">\r\n                                            {new Date(vestingRow[0] * 1000).toDateString()}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"right\">{(vestingRow[1] / Math.pow(10, row.decimals)).toFixed(2)}</TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </Box>\r\n                    </Collapse>\r\n                    </TableCell>\r\n                </TableRow> */}\r\n            </>\r\n        )\r\n    }\r\n\r\n    // const onChangeSearchWallet = async (e) => {\r\n    //     setSearchWallet(e.target.value);\r\n    //     let provider = await connector.getProvider()\r\n    //     if (e.target.value === \"\" || checkWalletAddress(provider, e.target.value)) {\r\n    //         setSearchOtherWalletError(false);\r\n    //         setSearchHelperText(\"\");\r\n    //     } else {\r\n    //         setSearchOtherWalletError(true);\r\n    //         setSearchHelperText(\"Invalid wallet address\");\r\n    //     }\r\n    // }\r\n\r\n    // const searchOtherWallet = async (e) => {\r\n    //     console.log(searchOtherWalletError)\r\n    //     if (e.key === \"Enter\" && !searchOtherWalletError) {\r\n    //         let provider = await connector.getProvider()\r\n    //         let wallet = e.target.value;\r\n    //         console.log(wallet)\r\n    //         if (wallet === \"\") {\r\n    //             const newdata = await getData(provider);\r\n    //             setData(newdata);\r\n    //         } else {\r\n    //             const newdata = await getData(provider);   \r\n    //             setData(newdata);\r\n    //             setSearchWallet(\"\");\r\n    //         }\r\n    //     }\r\n    // }\r\n    return (\r\n        <Container className={classes.root} maxWidth=\"lg\" style={{paddingLeft:20, paddingRight:20}}>\r\n            <Box className={classes.info}>\r\n                <Grid container direction=\"row\" justifyContent=\"space-evenly\" alignItems=\"center\" >\r\n                    <Grid className={isMobile ? `${mobileClasses.root} grid text-center`  : \"grid text-center\"} style={{marginTop:40}} item xs={12} sm={12} md={6} >\r\n                        <div style={{maxWidth:400, display:'inline-block', textAlign:'left'}}>\r\n                            <h1>Create your own custom token lock instantly.</h1>\r\n                            <p>All coins are locked into our audited  smart contract and can only be withdrawn  by you after lock time expires.</p>\r\n                            <Link\r\n                                href={`${explorer}/address/${lockerAddress}`}\r\n                                target=\"_blank\"\r\n                                color=\"blue\"\r\n                                underline=\"none\"\r\n                                className={classes.button}\r\n                            ><Button variant=\"contained\">Explore Contract</Button></Link>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid className={isMobile ? `${mobileClasses.root} grid`  : \"grid\"} style={{marginTop:40}} item xs={12} sm={12} md={6} >\r\n                        <Card className=\"card\">\r\n                            <CardHeader\r\n                                className={dashboardClasses.cardHeader}\r\n                                title=\"Create New Lock\"\r\n                            />\r\n                            <CardContent >\r\n                                <img src=\"/lock.png\" />\r\n                                <RadioGroup\r\n                                    aria-labelledby=\"demo-radio-buttons-group-label\"\r\n                                    defaultValue=\"female\"\r\n                                    name=\"radio-buttons-group\"\r\n                                >\r\n                                    <SwipeableViews\r\n                                        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                                        index={activeStep}\r\n                                        onChangeIndex={handleStepChange}\r\n                                    >\r\n                                       \r\n                                        <div key={1} style={{paddingLeft:1, paddingRight:1}}>\r\n                                            <p style={{textAlign:'center'}} color=\"textSecondary\">\r\n                                                Choose the blockchain network.\r\n                                            </p>\r\n                                            {\r\n                                                networkData.map((item)=>\r\n                                                <Grid\r\n                                                    className={classes.networkSelector}\r\n                                                    container\r\n                                                    direction=\"row\"\r\n                                                    justifyContent=\"space-evenly\"\r\n                                                    alignItems=\"center\"\r\n                                                    style={{padding:\"10px 0px\", border:item.name==network?\"1px solid #e55370\":\"1px solid transparent\", borderRadius:'5px'}}\r\n                                                    key={item.name}\r\n                                                    onClick = {()=>setNetwork(item.name)}\r\n                                                >\r\n                                                    <Grid item  xs={10} sm={11} md={11}>\r\n                                                        <Grid \r\n                                                            container\r\n                                                            direction=\"row\"\r\n                                                            \r\n                                                            alignItems=\"center\"\r\n                                                        >\r\n                                                            <Grid item className=\"text-center\" xs={3} sm={2} md={2}>\r\n                                                                <img className={dashboardClasses.networkImage} src={item.url} alt=\"network\" />\r\n                                                            </Grid>\r\n                                                            <Grid item   xs={9} sm={10} md={10}>\r\n                                                                <p  color=\"textSecondary\" className={dashboardClasses.networkTitle}>\r\n                                                                    {item.name}\r\n                                                                </p>\r\n                                                                <p color=\"textSecondary\" className={dashboardClasses.networkDes}>\r\n                                                                    {item.subtitle}\r\n                                                                </p>\r\n                                                            </Grid>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                    <Grid item  className=\"text-center\" xs={2} sm={1} md={1}>\r\n                                                        {item.name==network ? <div style={{width:\"20px\", height:'20px', borderRadius:\"10px\", backgroundColor:'#e55370', display:'inline-block'}} />: <div style={{width:\"20px\", height:'20px', borderRadius:\"10px\", border:'1px solid #e55370', display:'inline-block'}} />}\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                )\r\n                                            }\r\n                                        </div>\r\n                                        <div key={2} style={{paddingLeft:1, paddingRight:1}}>\r\n                                            <p style={{textAlign:'center'}} color=\"textSecondary\">\r\n                                                Select the type of token you would like to create a lock for.\r\n                                                You can create multiple locks with different settings for each one.\r\n                                            </p>\r\n                                            {\r\n                                                network !=\"\" && networkData.find((item)=>item.name==network).subData.map((each)=><Grid\r\n                                                className={classes.networkSelector}\r\n                                                container\r\n                                                direction=\"row\"\r\n                                                justifyContent=\"space-evenly\"\r\n                                                alignItems=\"center\"\r\n                                                style={{padding:\"10px 0px\", border:each.name==subMethod?\"1px solid #e55370\":\"1px solid transparent\", borderRadius:'5px'}}\r\n                                                key={each.name}\r\n                                                onClick = {()=>setSubMethod(each.name)}\r\n                                            >\r\n                                                <Grid item  xs={10} sm={11} md={11}>\r\n                                                    <Grid \r\n                                                        container\r\n                                                        direction=\"row\"\r\n                                                        alignItems=\"center\"\r\n                                                    >\r\n                                                        <Grid item className=\"text-center\" xs={3} sm={2} md={2}>\r\n                                                            <img className={dashboardClasses.networkImage} src={each.url} alt=\"network\" />\r\n                                                        </Grid>\r\n                                                        <Grid item   xs={9} sm={10} md={10}>\r\n                                                            <p  color=\"textSecondary\" className={dashboardClasses.networkTitle}>\r\n                                                                {each.name}\r\n                                                            </p>\r\n                                                            <p  color=\"textSecondary\" className={dashboardClasses.networkDes}>\r\n                                                                {each.subTitle}\r\n                                                            </p>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                <Grid item  className=\"text-center\" xs={2} sm={1} md={1}>\r\n                                                    {each.name==subMethod ? <div className={dashboardClasses.fillCircle} />: <div className={dashboardClasses.emptyCircle} />}\r\n                                                </Grid>\r\n                                            </Grid>)\r\n                                            }\r\n                                            \r\n                                        </div>\r\n                                        <div key={3} style={{paddingLeft:1, paddingRight:1}}>\r\n                                            <p className=\"text-center\" color=\"textSecondary\">\r\n                                                Enter the token address you would like to lock for\r\n                                            </p>\r\n                                            <FormControl sx={{ m: 1, width: '25ch' }} variant=\"outlined\" style={{width:'-webkit-fill-available'}}>\r\n                                                <InputLabel htmlFor=\"outlined-adornment-password\">Address</InputLabel>\r\n                                                <OutlinedInput\r\n                                                    id=\"outlined-adornment-password\"\r\n                                                    type=\"text\"\r\n                                                    value={values.tokenAddress}\r\n                                                    onChange={handleChange}\r\n                                                    // onKeyDown={handleChange}\r\n                                                    endAdornment={\r\n                                                    <InputAdornment position=\"end\">\r\n                                                        <IconButton\r\n                                                        aria-label=\"toggle search\"\r\n                                                        onClick={handleClickSearch}\r\n                                                        onMouseDown={handleMouseDownPassword}\r\n                                                        edge=\"end\"\r\n                                                        >\r\n                                                        <Search />\r\n                                                        </IconButton>\r\n                                                    </InputAdornment>\r\n                                                    }\r\n                                                    label=\"Password\"\r\n                                                />\r\n                                            </FormControl>\r\n                                            \r\n                                            {\r\n                                                token != undefined && token.symbol !=undefined && token.symbol !=\"\" &&\r\n                                                <div style={{paddingLeft:20, paddingRight:20}}>\r\n                                                    <p style={{margin:\"0px\"}}>Token Found</p>\r\n                                                    <Grid \r\n                                                        container\r\n                                                        direction=\"row\"\r\n                                                        justifyContent=\"space-between\"\r\n                                                        alignItems=\"center\"\r\n                                                    >\r\n                                                        <Grid item className={dashboardClasses.textLeft} xs={6} sm={6} md={6}>\r\n                                                            <img className={dashboardClasses.tokenImage} src=\"/lock.png\" alt=\"network\" />\r\n                                                            <p  color=\"textSecondary\" className={dashboardClasses.tokenTitle}>\r\n                                                                {token.symbol}\r\n                                                            </p>\r\n                                                        </Grid>\r\n                                                        <Grid item className={dashboardClasses.textRight}  xs={6} sm={6} md={6}>\r\n                                                            <Button variant=\"contained\" color=\"error\" sm={12} onClick={selectToken}>Select</Button>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </div>\r\n                                            }\r\n                                            \r\n                                        </div>\r\n                                        <div key={4} style={{paddingLeft:1, paddingRight:1}}>\r\n                                            <Grid \r\n                                                container\r\n                                                direction=\"row\"\r\n                                                justifyContent=\"space-between\"\r\n                                                alignItems=\"center\"\r\n                                                className={dashboardClasses.balanceContainer}\r\n                                            >\r\n                                                <Grid item className={dashboardClasses.textLeft} xs={6} sm={6} md={6}>\r\n                                                    <TextField\r\n                                                        id=\"standard-number\"\r\n                                                        label=\"Lock Amount\"\r\n                                                        type=\"number\"\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                            inputprops: { min: 1 }\r\n                                                        }}\r\n                                                        InputProps={{ inputprops: { min: 1 } }}\r\n                                                        variant=\"standard\"\r\n                                                        onChange={handleLockAmount}\r\n                                                        value={lockAmount}\r\n                                                    />\r\n                                                </Grid>\r\n                                                <Grid item className={dashboardClasses.textRight}  xs={6} sm={6} md={6}>\r\n                                                    <p style={{marginBottom:2, marginTop:0, fontSize: \"10px\"}}>Balance: {(userBalance / Math.pow(10, token.decimals)).toFixed(2)}</p>\r\n                                                    <Grid \r\n                                                        container\r\n                                                        direction=\"row\"\r\n                                                        justifyContent=\"space-between\"\r\n                                                        alignItems=\"center\"\r\n                                                    >\r\n                                                        <Grid item className={dashboardClasses.textLeft} xs={6} sm={6} md={6}>\r\n                                                            <Button variant=\"contained\" color=\"error\" sm={12} onClick={selectLockAmountMax}>Max</Button>\r\n                                                        </Grid>\r\n                                                        <Grid item className={dashboardClasses.textRight} xs={6} sm={6} md={6}>\r\n                                                            <img style={{height:30}} src=\"/lock.png\" alt=\"network\" />\r\n                                                            <p  color=\"textSecondary\" className={dashboardClasses.tokenTitle}>\r\n                                                                {token.symbol}\r\n                                                            </p>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            <br />\r\n                                            {/* <div className=\"text-center\" style={{padding:\"10px 0px\"}}>\r\n                                                <LockIcon />\r\n                                            </div> */}\r\n                                            <Grid \r\n                                                container\r\n                                                direction=\"row\"\r\n                                                justifyContent=\"space-between\"\r\n                                                alignItems=\"center\"\r\n                                                className={dashboardClasses.balanceContainer}\r\n                                            >\r\n                                                <Grid item className={dashboardClasses.textLeft} xs={6} sm={6} md={6}>\r\n                                                    <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                                        <DateTimePicker\r\n                                                            id=\"standard-number\"\r\n                                                            label=\"Unlock Date\"\r\n                                                            renderInput={(props) => <TextField {...props} />}\r\n                                                            // type=\"time\"\r\n                                                            // InputLabelProps={{\r\n                                                            //     shrink: true,\r\n                                                            //     inputprops: { min: 1 }\r\n                                                            // }}\r\n                                                            // InputProps={{ inputprops: { min: 1 } }}\r\n                                                            value={withdrawDate}\r\n                                                            onChange={(value) => handleDate(value)}\r\n                                                            // variant=\"standard\"\r\n                                                        />\r\n                                                    </LocalizationProvider>\r\n                                                </Grid>\r\n                                                <Grid item className={dashboardClasses.textRight}  xs={6} sm={6} md={6}>\r\n                                                    {\r\n                                                        isAllowed == 2 ? <Button variant=\"contained\" color=\"secondary\" sm={12} disabled={!dateUseful} onClick={depositToken}>Deposit</Button>\r\n                                                        : (isAllowed == 1 ? <Button variant=\"contained\" color=\"secondary\" sm={12} onClick={approveToken}>Approve</Button> : <Button variant=\"contained\" color=\"secondary\" sm={12} disabled>Checking</Button>)\r\n                                                    }\r\n                                                    {/* <Grid \r\n                                                        container\r\n                                                        direction=\"row\"\r\n                                                        justifyContent=\"space-between\"\r\n                                                        alignItems=\"center\"\r\n                                                    >\r\n                                                        <Grid item className={dashboardClasses.textLeft} xs={6} sm={6} md={6}>\r\n                                                            \r\n                                                        </Grid>\r\n                                                        <Grid item className={dashboardClasses.textRight} xs={6} sm={6} md={6}>\r\n                                                            <img style={{height:30}} src=\"/lock.png\" alt=\"network\" />\r\n                                                            <p  color=\"textSecondary\" className={dashboardClasses.tokenTitle}>\r\n                                                                ICC\r\n                                                            </p>\r\n                                                        </Grid>\r\n                                                    </Grid> */}\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </div>\r\n                                    </SwipeableViews>\r\n                                    <MobileStepper\r\n                                        className={dashboardClasses.mobileStepper}\r\n                                        steps={maxSteps}\r\n                                        position=\"static\"\r\n                                        activeStep={activeStep}\r\n                                        nextButton={\r\n                                        <Button\r\n                                            size=\"small\"\r\n                                            onClick={handleNext}\r\n                                            disabled={activeStep === maxSteps - 1}\r\n                                        >\r\n                                            Next\r\n                                            {theme.direction === 'rtl' ? (\r\n                                            <KeyboardArrowLeft />\r\n                                            ) : (\r\n                                            <KeyboardArrowRight />\r\n                                            )}\r\n                                        </Button>\r\n                                        }\r\n                                        backButton={\r\n                                        <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\r\n                                            {theme.direction === 'rtl' ? (\r\n                                            <KeyboardArrowRight />\r\n                                            ) : (\r\n                                            <KeyboardArrowLeft />\r\n                                            )}\r\n                                            Back\r\n                                        </Button>\r\n                                        }\r\n                                    />\r\n                                </RadioGroup>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                    <Grid className={isMobile ? `${mobileClasses.root} grid `  : \"grid\"} style={{marginTop:40}} item xs={12} sm={12} md={12} >\r\n                        <Card className=\"card\">\r\n                            <CardHeader\r\n                                className={dashboardClasses.cardHeader}\r\n                                title=\"Locked Token List\"\r\n                            />\r\n                            <CardContent >\r\n                            {/* <TextField\r\n                                id=\"outlined-search\"\r\n                                label=\"Search other wallet\"\r\n                                type=\"search\"\r\n                                variant=\"standard\"\r\n                                fullWidth={true}\r\n                                color=\"primary\"\r\n                                size=\"small\"\r\n                                onKeyPress={searchOtherWallet}\r\n                                value={searchWallet}\r\n                                onChange={onChangeSearchWallet}\r\n                                error={searchOtherWalletError}\r\n                                helperText={searchHelperText}\r\n                            /> */}\r\n                                {data.length == 0 && \r\n                                <div className=\"text-center\" style={{width:'100%', padding:\"20px 0px\"}}>\r\n                                    <img src=\"/mylock.png\" alt=\"My Lock\" style={{height:200}}/>\r\n                                    <h2 style={{marginBottom:0}}>No Locked Coin</h2>\r\n                                    <p style={{color:'grey',margin:0}}>You have not locked up any coins yet.</p>\r\n                                </div>}\r\n                                {data.length != 0 && <TableContainer component={Paper}>\r\n                                    <Table  aria-label=\"collapsible table\">\r\n                                        <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell>No</TableCell>\r\n                                            <TableCell>Token</TableCell>\r\n                                            <TableCell align=\"right\">Tokens Locked</TableCell>\r\n                                            <TableCell align=\"right\">Liquidity Locked</TableCell>\r\n                                            <TableCell align=\"right\">Next Unlock</TableCell>\r\n                                            <TableCell align=\"right\"></TableCell>\r\n                                        </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody>\r\n                                        {data.map((row, index) => (\r\n                                            <Row key={`lockToken-${index}`} row={row} index={index} />\r\n                                        ))}\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </TableContainer>}\r\n                            </CardContent>\r\n                        </Card>\r\n                        \r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"modal-modal-title\"\r\n                aria-describedby=\"modal-modal-description\"\r\n            >\r\n                <Box sx={style}>\r\n                    \r\n                    {networkData.find((item)=>item.name==network) && <div style={{textAlign:'center'}}><img style={{width:\"50px\"}} src={networkData.find((item)=>item.name==network).url} alt=\"network\" /></div>}\r\n                    <h3 id=\"modal-modal-title\" variant=\"h6\" component=\"h2\" style={{textAlign:'center', marginTop:0}}>\r\n                        {modalTitle}\r\n                    </h3>\r\n                    <p id=\"modal-modal-description\" sx={{ mt: 2 }} style={{textAlign:'center', fontSize:12, color:'grey'}}>\r\n                        {modalDes}\r\n                    </p>\r\n                    <Button variant=\"contained\" color=\"error\" style={{width:'100%'}} onClick={handleClose}>Close</Button>\r\n                </Box>\r\n            </Modal>\r\n            <Snackbar\r\n                open={snackbar}\r\n                autoHideDuration={600}\r\n                style={{width:100}}\r\n                onClose={handleSnackbarClose}\r\n                message=\"Successfully Copied to Clipboard\"\r\n                // action={action}\r\n            />\r\n        </Container >\r\n    )\r\n}\r\nconst mapStateToProps = state => ({\r\n    statistics: state.statistics,\r\n})\r\n\r\nexport default connect(mapStateToProps)(Dashboard);\r\n","import Web3 from \"web3\"\r\nimport {\r\n    Multicall\r\n  } from 'ethereum-multicall';\r\n\r\nimport lockerContractAbi from \"./locker_abi.json\"\r\nimport erc20Abi from \"./erc20_abi.json\"\r\nimport liquidityPoolAbi from \"./liquidityPool_abi.json\"\r\nimport axios from 'axios'\r\n\r\n// const lockerAddress = \"0x9D1018Cf42c12D78D073C38A79eCaB18A4FDc2A5\";\r\n// const lockerAddress = \"0x7E73A50B8F78F8Ad584d86Aab0ba966d1BE33bf1\";\r\n// const lockerAddress = \"0x54eFc25b4B3d0f08494B685F41ccd834bb95AA23\";\r\n// const lockerAddress = \"0xC25689105C2F54cd7916e5c8101cFEBA7a08093E\";\r\nexport const lockerAddress = \"0xe7B5c1aFffe4297adE4527C41CA9800C7905E7Eb\";\r\n// const swapTokenLockerFactory = '0x6a33a15d826e59792b60dec950e8af2fa7d58f9e';\r\nexport const swapTokenLockerFactory = '0x74818F8D9C0666ab332Af6B8DCBc448e1F10A133';\r\nexport const airdropAddress = \"0xa155DF21209A845dbf894070b51Cc44466F23d6e\";\r\n\r\n// const provider = \"https://api.avax.network/ext/bc/C/rpc\";\r\nconst provider = \"https://api.avax-test.network/ext/bc/C/rpc\";\r\n\r\nconst serverApi = 'https://hidden-scrubland-96810.herokuapp.com/api';\r\n\r\nexport const explorer = \"https://testnet.snowtrace.io\";\r\n\r\nexport const deposit = async (provider, token, amount, date, account) => {\r\n    let unlockDate = new Date(date);\r\n    let UTCTimestamp = Math.round(unlockDate.getTime() / 1000)\r\n    let web3 = new Web3(provider);\r\n    let contract = new web3.eth.Contract(lockerContractAbi, lockerAddress);\r\n    let feeInETH = await contract.methods.feesInETH().call();\r\n    let result = await contract.methods[\"lockTokens\"](token.address, account, BigInt(amount), UTCTimestamp).send({from: account, value: BigInt(feeInETH * Math.pow(10, 18)).toString()});\r\n    return result.status;\r\n}\r\n\r\nexport const withdraw = async (provider, id, account) => {\r\n    let web3 = new Web3(provider);\r\n    let contract = new web3.eth.Contract(lockerContractAbi, lockerAddress);\r\n    let result = await contract.methods[\"withdrawTokens\"](id).send({\r\n        from: account\r\n    });\r\n    return result.status;\r\n}\r\n\r\nexport const approve = async (provider, token, account) => {\r\n    let web3 = new Web3(provider);\r\n    let contract = new web3.eth.Contract(erc20Abi, token.address);\r\n    let result = await contract.methods[\"approve\"](lockerAddress, web3.utils.toBN(\"115792089237316195423570985008687907853269984665640564039457584007913129639935\")).send({from: account});\r\n    return result.status;\r\n}\r\n\r\nexport const approveToken = async (provider, token, account, deployedContract) => {\r\n    let web3 = new Web3(provider);\r\n    let contract = new web3.eth.Contract(erc20Abi, token);\r\n    let result = await contract.methods[\"approve\"](deployedContract, web3.utils.toBN(\"115792089237316195423570985008687907853269984665640564039457584007913129639935\")).send({from: account});\r\n    return result.status;\r\n}\r\n\r\nexport const allowance = async (token, account) => {\r\n    let web3 = new Web3(provider);\r\n    let contract = new web3.eth.Contract(erc20Abi, token.address);\r\n    let result = await contract.methods[\"allowance\"](account, lockerAddress).call();\r\n    return result;\r\n}\r\n\r\nexport const getTokenBalance = async (token, account) => {\r\n    let web3 = new Web3(provider);\r\n    let contract = new web3.eth.Contract(erc20Abi, token.address);\r\n    let result = await contract.methods[\"balanceOf\"](account).call();\r\n    return result;\r\n}\r\n\r\nexport const getRawData = async (account) => {\r\n    let web3 = new Web3(provider);\r\n    let contract = new web3.eth.Contract(lockerContractAbi, lockerAddress);\r\n    let depositIds = await contract.methods[\"getAllDepositIds\"]().call();\r\n    if (!depositIds.length) return []\r\n    const multicall = new Multicall({ web3Instance: web3, tryAggregate: true });\r\n    let contractCallContext = {\r\n        reference: \"lockedToken\",\r\n        contractAddress: lockerAddress,\r\n        abi: lockerContractAbi,\r\n        calls: depositIds.map(each => {\r\n            return { reference: 'lockedTokensCall', methodName: 'lockedToken', methodParameters: [each] }\r\n        })\r\n    }\r\n    let response = await multicall.call(contractCallContext);\r\n    const returnValues = [];\r\n    response.results.lockedToken.callsReturnContext.map(each => {\r\n        const returnValue = {\r\n            id: each.methodParameters[0],\r\n            token: each.returnValues[0],\r\n            owner: each.returnValues[1],\r\n            amount: BigInt(parseInt(each.returnValues[2].hex, 16)).toString(),\r\n            timestamp: parseInt(each.returnValues[3].hex, 16),\r\n            isWithdrawn: each.returnValues[4]\r\n        }\r\n        if (returnValue.owner.toLowerCase() === account.toLowerCase()) returnValues.push(returnValue);\r\n    })\r\n    return returnValues;\r\n\r\n        // let lockedTokenLists = [];\r\n        // for (const [key, value] of Object.entries(response.results)) {\r\n        //     lockedTokenLists.push(value.callsReturnContext[0][\"returnValues\"][0]);\r\n        // }\r\n        // contractCallContext = [];\r\n        // for (let i = 0; i < length; i++) {\r\n        //     contractCallContext.push({\r\n        //         reference: i,\r\n        //         contractAddress: lockerAddress,\r\n        //         abi: lockerContractAbi,\r\n        //         calls: [{ reference: 'lockedTokensCall', methodName: 'getUserTokenInfo', methodParameters: [lockedTokenLists[i], account] }]\r\n        //     })\r\n        // }\r\n        // response = await multicall.call(contractCallContext);\r\n        // let userInfo = [];\r\n        // for (const [key, value] of Object.entries(response.results)) {\r\n        //     if (web3.utils.hexToNumberString(value.callsReturnContext[0].returnValues[2].hex) == '0') continue;\r\n        //     userInfo.push({token: lockedTokenLists[key], deposited: web3.utils.hexToNumberString(value.callsReturnContext[0].returnValues[0].hex), withdrawed: web3.utils.hexToNumberString(value.callsReturnContext[0].returnValues[1].hex), vestLength: web3.utils.hexToNumberString(value.callsReturnContext[0].returnValues[2].hex)})\r\n        // }\r\n        // if (!userInfo.length) return [];\r\n        // contractCallContext = [];\r\n        // for (let i = 0; i < userInfo.length; i++) {\r\n        //     let context = {\r\n        //         reference: i,\r\n        //         contractAddress: lockerAddress,\r\n        //         abi: lockerContractAbi,\r\n        //         calls: []\r\n        //     }\r\n        //     for (let j = 0; j < userInfo[i][\"vestLength\"]; j++) {\r\n        //         context.calls.push({ reference: 'getUserVestingAtIndexCall', methodName: 'getUserVestingAtIndex', methodParameters: [userInfo[i].token, account, j] });\r\n        //     }\r\n        //     contractCallContext.push(context)\r\n        // }\r\n        // response = await multicall.call(contractCallContext);\r\n        // for (const [key, value] of Object.entries(response.results)) {\r\n        //     userInfo[key][\"vesting\"] = value.callsReturnContext.map(each => {\r\n        //         return each.returnValues.map(data => {\r\n        //             return web3.utils.hexToNumberString(data.hex)\r\n        //         })\r\n        //     })\r\n        // }\r\n        // contractCallContext = [];\r\n        // for (let i = 0; i < userInfo.length; i++) {\r\n        //     let context = {\r\n        //         reference: i,\r\n        //         contractAddress: userInfo[i][\"token\"],\r\n        //         abi: erc20Abi,\r\n        //         calls: [{ reference: 'decimalsCall', methodName: 'decimals' }, { reference: 'symbolCall', methodName: 'symbol'}]\r\n        //     }\r\n        //     contractCallContext.push(context);\r\n        // }\r\n        // response = await multicall.call(contractCallContext);\r\n        // for (const [key, value] of Object.entries(response.results)) {\r\n        //     userInfo[key][\"decimals\"] = value.callsReturnContext[0][\"returnValues\"][0];\r\n        //     userInfo[key][\"symbol\"] = value.callsReturnContext[1][\"returnValues\"][0];\r\n        // }\r\n        // let currentTime = Math.round(Date.now() / 1000);\r\n        // // console.log(userInfo)\r\n        // userInfo = userInfo.map(each => {\r\n        //     console.log(each);\r\n        //     let withdrawable = web3.utils.toBN(0);\r\n        //     each.vesting.map((eachVest) => {\r\n        //         if (Number(eachVest[0]) < currentTime) withdrawable = withdrawable.add(web3.utils.toBN(eachVest[1]));\r\n        //     })\r\n        //     withdrawable = withdrawable.sub(web3.utils.toBN(each.withdrawed));\r\n        //     each.withdrawable = withdrawable.toString();\r\n        //     return each;\r\n        // })\r\n    }\r\n    \r\nexport const getData = async (account) => {\r\n    const response = await axios.get(`${serverApi}/locker/lockedtokens/${account}`);\r\n    const lockerDataByWallet = response.data;\r\n    return lockerDataByWallet;\r\n}\r\n\r\nexport const getLockedTokenDetails = async (tokenAddress, account) => {\r\n\r\n    // const tokenData = data.find(each => each.address === tokenAddress);\r\n    \r\n    const rawData = await getRawData(account);\r\n    let web3 = new Web3(provider);\r\n\r\n    let tokenLocked = BigInt(0);\r\n    rawData.map(each => {\r\n        if (each.token === tokenAddress && !each.isWithdrawn) tokenLocked = tokenLocked + BigInt(each.amount);\r\n    });\r\n    // console.log(rawData)\r\n    const tokenContract = new web3.eth.Contract(erc20Abi, tokenAddress);\r\n    let symbol = await tokenContract.methods.symbol().call();\r\n    let decimals = await tokenContract.methods.decimals().call();\r\n    let totalSupply = await tokenContract.methods.totalSupply().call();\r\n    let liquidityLocked = BigInt(0);\r\n    let tokenLockHistory = [];\r\n\r\n    const multicall = new Multicall({ web3Instance: web3, tryAggregate: true });\r\n    let contractCallContext = rawData.map((each, index) => {\r\n        return {\r\n            reference: index,\r\n            contractAddress: each.token,\r\n            abi: erc20Abi,\r\n            calls: [{ reference: 'symbolsCall', methodName: 'symbol' }]\r\n        }\r\n    })\r\n    let response = await multicall.call(contractCallContext);\r\n    let symbols = [];\r\n    for (const [key, value] of Object.entries(response.results)) {\r\n        symbols.push(value.callsReturnContext[0].returnValues[0]);\r\n    }\r\n    // console.log(rawData)\r\n    for (let i = 0; i < rawData.length; i++) {\r\n        let each = rawData[i];\r\n        let address = each.token;\r\n        let ownerAddress = each.owner;\r\n        let tokenAmount = each.amount;\r\n        let timestamp = each.timestamp;\r\n        let isWithdrawn = each.isWithdrawn;\r\n        //default token\r\n        if (address.toLowerCase() === tokenAddress.toLowerCase()) tokenLockHistory.push({id: each.id, address: address, owner: ownerAddress, tokenAmount: tokenAmount, timestamp: timestamp, isWithdrawn: isWithdrawn});\r\n        //pool token\r\n        else if (symbols[i] === 'HUL') {\r\n            let poolContract = new web3.eth.Contract(liquidityPoolAbi, each.token);\r\n            let token0 = await poolContract.methods.token0().call();\r\n            let token1 = await poolContract.methods.token1().call();\r\n            if (token0.toLowerCase() === tokenAddress.toLowerCase() || token1.toLowerCase() === tokenAddress.toLowerCase()) {\r\n                let totalSupply = await poolContract.methods.totalSupply().call();\r\n                let baseTokenTotalAmount = await tokenContract.methods.balanceOf(address).call();\r\n                let baseTokenAmount = BigInt(baseTokenTotalAmount) * BigInt(tokenAmount) / BigInt(totalSupply);\r\n                if (!each.isWithdrawn) liquidityLocked = liquidityLocked + baseTokenAmount;\r\n                tokenLockHistory.push({id: each.id, isPool: true, address: address, owner: ownerAddress, tokenAmount: tokenAmount, baseTokenAmount: baseTokenAmount.toString(), timestamp: timestamp, isWithdrawn: isWithdrawn});\r\n            }\r\n        }\r\n    }\r\n    // let tokenSymbol = await tokenContract.methods.symbol().call();\r\n    // let tokenDecimals = await tokenContract.methods.decimals().call();\r\n    // let tokenLocked = await tokenContract.methods.balanceOf(lockerAddress).call();\r\n    // let tokenTotalSupply = await tokenContract.methods.totalSupply().call();\r\n\r\n    let lockerContract = new web3.eth.Contract(lockerContractAbi, lockerAddress);\r\n    let depositEvents = await lockerContract.getPastEvents(\"LogLocking\", {\r\n        fromBlock: 0\r\n    })\r\n    let withdrawEvents = await lockerContract.getPastEvents(\"LogWithdrawal\", {\r\n        fromBlock: 0\r\n    })\r\n\r\n    // let tokenTransferEvents = await tokenContract.getPastEvents(\"Transfer\",{\r\n    //     fromBlock: 0,\r\n    //     toBlock: \"latest\",\r\n    //     filter: {\r\n    //         to: lockerAddress\r\n    //     }\r\n    // })\r\n    // let tokenTransferTransactions = await Promise.all(tokenTransferEvents.map(each => web3.eth.getTransaction(each.transactionHash)))\r\n    // tokenTransferTransactions = tokenTransferTransactions.filter(each => each.input.length === 266);\r\n    \r\n    \r\n    for(let i=0; i<depositEvents.length; i++) {\r\n        let blockDetail = await web3.eth.getBlock(depositEvents[i].blockNumber);\r\n        depositEvents[i].timestamp = blockDetail.timestamp;\r\n    }\r\n    for(let i=0; i<withdrawEvents.length; i++) {\r\n        let blockDetail = await web3.eth.getBlock(withdrawEvents[i].blockNumber);\r\n        withdrawEvents[i].timestamp = blockDetail.timestamp;\r\n    }\r\n    let events = [], j = 0;\r\n    for(let i=0; i<depositEvents.length;i++) {\r\n        if(withdrawEvents[j] && withdrawEvents[j].returnValues.index === depositEvents[i].returnValues.index) {\r\n            events.push({deposit: depositEvents[i], withdraw: withdrawEvents[j]});\r\n            j++;\r\n        } else {\r\n            events.push({deposit: depositEvents[i]});\r\n        }\r\n    }\r\n\r\n    return {\r\n        address: tokenAddress,\r\n        symbol: symbol,\r\n        decimals: decimals,\r\n        totalSupply: totalSupply,\r\n        liquidityLocked: liquidityLocked,\r\n        tokenLocked: tokenLocked,\r\n        history: tokenLockHistory,\r\n        events: events\r\n    }\r\n}\r\n\r\nexport const checkWalletAddress = (walletAddress) => {\r\n    let web3 = new Web3(provider);\r\n    return web3.utils.isAddress(walletAddress);\r\n}\r\n\r\nexport const getLastDeployedContract = async (account) => {\r\n    const response = await axios.get(`${serverApi}/vesting/lastDeployed/${account}`);\r\n    const lastDeployedAddress = response.data;\r\n    return lastDeployedAddress;\r\n}\r\n\r\nexport const deployContract = async (provider, account, token) => {\r\n    const web3 = new Web3(provider);\r\n    const abi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"createTokenLocker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]\r\n    const contract = new web3.eth.Contract(abi, swapTokenLockerFactory);\r\n    let result = contract.methods.createTokenLocker(token).send({\r\n        from: account\r\n    })\r\n    return result;\r\n}\r\n\r\nexport const sendTokenVesting = async (provider, deployedContract, csvData, token, account) => {\r\n    let _users = [], _amounts = [], _lockHours = [], _sendAmount = BigInt(0);\r\n    const web3 = new Web3(provider);\r\n    let abi = [{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    let contract = new web3.eth.Contract(abi, token);\r\n    let decimals = await contract.methods.decimals().call();\r\n    csvData.map(each => {\r\n        _users.push(each.address);\r\n        _amounts.push(BigInt(each.amount * Math.pow(10, decimals)).toString());\r\n        switch(each.period[each.period.length - 1]) {\r\n            case 'M':\r\n                _lockHours.push(each.period.slice(0, each.period.length - 1) * 30 * 24);\r\n                break;\r\n            case 'W':\r\n                _lockHours.push(each.period.slice(0, each.period.length - 1) * 7 * 24);\r\n                break;\r\n            case 'D':\r\n                _lockHours.push(each.period.slice(0, each.period.length - 1) * 24);\r\n                break;\r\n            case 'h':\r\n                _lockHours.push(each.period.slice(0, each.period.length - 1));\r\n                \r\n        }\r\n        _sendAmount += BigInt(each.amount * Math.pow(10, decimals));\r\n    })\r\n    _sendAmount = _sendAmount.toString();\r\n    abi = [{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint128[]\",\"name\":\"_amounts\",\"type\":\"uint128[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_lockHours\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256\",\"name\":\"_sendAmount\",\"type\":\"uint256\"}],\"name\":\"sendLockTokenMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\r\n    \r\n    contract = new web3.eth.Contract(abi, deployedContract)\r\n    let feesInETH = await contract.methods.feesInETH().call();\r\n    console.log(_users, _amounts, _lockHours, _sendAmount, account)\r\n    let result = await contract.methods.sendLockTokenMany(_users, _amounts, _lockHours, _sendAmount).send({\r\n        from: account,\r\n        value: BigInt(feesInETH * Math.pow(10, 18)).toString()\r\n    });\r\n    return result;\r\n}\r\n\r\nexport const getClaimTokenList = async (address) => {\r\n    const web3 = new Web3(provider);\r\n    let factoryContract, abi, erc20Abi, allContracts, response, multicall, contractCallContext;\r\n    abi = [{\"inputs\":[],\"name\":\"getAllContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    factoryContract = new web3.eth.Contract(abi, swapTokenLockerFactory);\r\n    allContracts = await factoryContract.methods.getAllContracts().call();\r\n    multicall = new Multicall({ web3Instance: web3, tryAggregate: true });\r\n    abi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLockData\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    erc20Abi = [{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]\r\n    contractCallContext = allContracts.map((each, index) => {\r\n        return {\r\n            reference: index,\r\n            contractAddress: each,\r\n            abi: abi,\r\n            calls: [\r\n                { reference: 'getLockDataCall', methodName: 'getLockData', methodParameters: [address] },\r\n                { reference: 'getTokenCall', methodName: 'getToken'}\r\n            ]\r\n        }\r\n    })\r\n    response = await multicall.call(contractCallContext);\r\n    let returnData = [];\r\n    contractCallContext = [];\r\n    for (const [key, value] of Object.entries(response.results)) {\r\n        let amount = BigInt(value.callsReturnContext[0].returnValues[0].hex).toString();\r\n        let claimedAmount = BigInt(value.callsReturnContext[0].returnValues[1].hex).toString();\r\n        let lockTimestamp = BigInt(value.callsReturnContext[0].returnValues[2].hex).toString();\r\n        let lastUpdated = BigInt(value.callsReturnContext[0].returnValues[3].hex).toString();\r\n        let lockHours = value.callsReturnContext[0].returnValues[4];\r\n        let contract = allContracts[key];\r\n        let token = value.callsReturnContext[1].returnValues[0];\r\n        if (amount !== '0') {\r\n            contractCallContext.push({\r\n                reference: returnData.length,\r\n                contractAddress: token,\r\n                abi: erc20Abi,\r\n                calls: [\r\n                    { reference: 'nameCall', methodName: 'name' },\r\n                    { reference: 'decimalsCall', methodName: 'decimals' },\r\n                    { reference: 'symbolCall', methodName: 'symbol' }\r\n                ]\r\n            })\r\n            returnData.push({\r\n                amount: amount,\r\n                claimedAmount: claimedAmount,\r\n                lockTimestamp: lockTimestamp,\r\n                lastUpdated: lastUpdated,\r\n                lockHours: lockHours,\r\n                contract: contract,\r\n                token: {\r\n                    address: token\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    response = await multicall.call(contractCallContext);\r\n    for (const [key, value] of Object.entries(response.results)) {\r\n        let name = value.callsReturnContext[0].returnValues[0];\r\n        let symbol = value.callsReturnContext[2].returnValues[0];\r\n        let decimals = value.callsReturnContext[1].returnValues[0];\r\n        returnData[key].token.name = name;\r\n        returnData[key].token.symbol = symbol;\r\n        returnData[key].token.decimals = decimals;\r\n    }\r\n    return returnData;\r\n}\r\n\r\nexport const claimToken = async (provider, tokenDetail, account) => {\r\n    let currentTimestamp = Math.floor(Date.now() / 1000);\r\n    if (currentTimestamp - tokenDetail.lastUpdated < 3600) return {state: false, reason: 'Wait to next claim available'};\r\n    const passedHours = Math.floor((currentTimestamp - tokenDetail.lockTimestamp) / 3600);\r\n    const availableAmount = BigInt(Math.floor(tokenDetail.amount * passedHours / tokenDetail.lockHours) - tokenDetail.claimedAmount).toString();\r\n    const web3 = new Web3(provider);\r\n    const abi = [{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"}],\"name\":\"claimToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\r\n    const contract = new web3.eth.Contract(abi, tokenDetail.contract);\r\n    const response = await contract.methods.claimToken(availableAmount).send({\r\n        from: account\r\n    });\r\n    console.log(response);\r\n}\r\n\r\nexport const airdrop = async (provider, csvData, token, account) => {\r\n    let _users = [], _amounts = [];\r\n    const web3 = new Web3(provider);\r\n    let abi = [{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    console.log(token)\r\n    let contract = new web3.eth.Contract(abi, token);\r\n    let decimals = await contract.methods.decimals().call();\r\n    csvData.map(each => {\r\n        _users.push(each.address);\r\n        _amounts.push(BigInt(each.amount * Math.pow(10, decimals)).toString());\r\n    })\r\n    abi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint128[]\",\"name\":\"_amounts\",\"type\":\"uint128[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]\r\n    contract = new web3.eth.Contract(abi, airdropAddress);\r\n    let result = await contract.methods.airdrop(token, _users, _amounts).send({\r\n        from: account\r\n    });\r\n    return result;\r\n}","export const CHAIN = '0xa869';\r\n// export const TOKENADDRESS = '0x0bbfecb93e99765ee8424cf6d8a0bcb483a721d6';\r\n// export const CHAIN = '0xa869';\r\nexport const TOKENADDRESS = '0x2F910059b8356D8AB31663B6ae027eEe7A3c4C00';\r\nexport const coinGeckoUrl = `https://www.coingecko.com`;\r\nexport const coinMarketCapUrl = `https://coinmarketcap.com`;\r\nexport const twitterUrl = `https://twitter.com`;\r\nexport const telegramUrl = `https://t.me`;\r\nexport const traderJoeUrl = `https://traderjoexyz.com/#/trade?outputCurrency=${TOKENADDRESS}`;\r\nexport const snowtraceUrl = `https://snowtrace.io/address/${TOKENADDRESS}`;\r\nexport const dexscreenerUrl = `https://dexscreener.com/avalanche`;\r\n\r\nexport const CHAINDATA = [\r\n    {name:\"Avalanche\", chain: CHAIN}\r\n];\r\n","import axios from 'axios';\r\nimport { walletAddress } from './redux/reducers';\r\n\r\nconst apiKey = 'SvMhtTsmQ239NmpwWjnnLWXtag5Jt8wYp7NF8F3Tear1QSaDRl9gnM34JZVXdLFV';\r\nconst apiConfig = {\r\n    headers: {\r\n        'x-api-key': apiKey\r\n    }\r\n}\r\nconst serverUrl = 'https://deep-index.moralis.io/api/v2';\r\n\r\nexport const getTokenPrice = async function (_chain, _tokenAddress) {\r\n    let price;\r\n    try {\r\n        price = await axios.get(`${serverUrl}/erc20/${_tokenAddress}/price?chain=${_chain}`, apiConfig);\r\n    } catch (e) {\r\n        price = 0;\r\n    }\r\n    return price && price.data;\r\n}\r\n\r\nexport const getTokenMetadata = async function (_chain, _tokenAddress) {\r\n    const tokenMetadata = await axios.get(`${serverUrl}/erc20/metadata?chain=${_chain}&addresses=${_tokenAddress}`, apiConfig);\r\n    return tokenMetadata.data;\r\n}\r\n\r\nexport const getTokenBalance = async function (_chain, _tokenAddress, _walletAddress) {\r\n    const balances = await axios.get(`${serverUrl}/${_walletAddress}/erc20?chain=${_chain}&token_addresses=${_tokenAddress}`, apiConfig);\r\n    return balances.data;\r\n}\r\n\r\nexport const runContractFunction = async function (_chain, _contractAddress, _functionName, _abi, _params) {\r\n    let result;\r\n    try {\r\n        result = await axios.post(`${serverUrl}/${_contractAddress}/function?chain=${_chain}&function_name=${_functionName}`, {\r\n            \"abi\": _abi,\r\n            \"params\": _params\r\n        }, apiConfig);\r\n    } catch (e) {\r\n        result = null;\r\n    }\r\n    return result ? result.data : result;\r\n}\r\n\r\nexport const getCurrentFee = async function (_chain, _tokenAddress, _walletAddress) {\r\n    const dynamicFeeAbi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getDynamicFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    if (await isExcludedFromFee(_chain, _tokenAddress, _walletAddress)) return 0;\r\n    const dynamicFee = await runContractFunction(_chain, _tokenAddress, 'getDynamicFee', dynamicFeeAbi, {from:_walletAddress});\r\n    return dynamicFee;\r\n}\r\n\r\nexport const isExcludedFromFee = async function (_chain, _tokenAddress, _walletAddress) {\r\n    const isExcludedFromFeeAbi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    return await runContractFunction(_chain, _tokenAddress, 'isExcludedFromFee', isExcludedFromFeeAbi, {account:_walletAddress});\r\n}\r\n\r\nexport const getCommonFee = async function (_chain, _tokenAddress) {\r\n    const liquidityAndMarketingFeeAbi = [{\"inputs\":[],\"name\":\"_liquidityAndMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    const taxFeeAbi = [{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    let commonFee = 0;\r\n    await Promise.all([\r\n        runContractFunction(_chain, _tokenAddress, '_liquidityAndMarketingFee', liquidityAndMarketingFeeAbi, {}),\r\n        runContractFunction(_chain, _tokenAddress, '_taxFee', taxFeeAbi, {})\r\n    ]).then(results => results.map(each => commonFee += Number(each)));\r\n    return commonFee;\r\n}\r\n\r\nexport const burntAndLeftTokenPercent = async function (_chain, _tokenAddress) {\r\n    const burntVsCirculatingSupplyAbi = [{\"inputs\":[],\"name\":\"burntVsCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"circulating\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    const data = await runContractFunction(_chain, _tokenAddress, 'burntVsCirculatingSupply', burntVsCirculatingSupplyAbi);\r\n    return {burnt: Number(data[0]), left: Number(data[1]), leftPercent: data[1] / (Number(data[0]) + Number(data[1])) * 100};\r\n}\r\n\r\nexport const totalFees = async function (_chain, _tokenAddress) {\r\n    const totalFeesAbi = [{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    const data = await runContractFunction(_chain, _tokenAddress, 'totalFees', totalFeesAbi);\r\n    return data;\r\n}\r\n\r\nexport const getTransactions = async function (_chain, _walletAddress) {\r\n    const transactions = await axios.get(`${serverUrl}/${_walletAddress}/erc20/transfers?chain=${_chain}&offset=0&oder=desc`, apiConfig);\r\n    return transactions.data;\r\n}\r\n\r\nexport const getLogsByAddress = async function (_chain, _tokenAddress) {\r\n    let offset = 0;\r\n    const response = await axios.get(`${serverUrl}/${_tokenAddress}/logs?chain=${_chain}&topic0=0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&offset=${offset}&oder=desc`, apiConfig);\r\n    let logs = response.data.result;\r\n    const total = response.data.total;\r\n    const pages = Math.ceil(total / 500);\r\n    let page = 1;\r\n    let getLogFunctions = [];\r\n    while (page < pages) {\r\n        offset = page * 500;\r\n        getLogFunctions.push(axios.get(`${serverUrl}/${_tokenAddress}/logs?chain=${_chain}&topic0=0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&offset=${offset}&oder=desc`, apiConfig));\r\n        page++;\r\n    }\r\n    if (getLogFunctions.length) {\r\n        await Promise.all(getLogFunctions).then(results => {\r\n            results.map(each => {\r\n                logs = logs.concat(each.data.result);\r\n            })\r\n        })\r\n    }\r\n    return logs;\r\n}\r\n\r\nfunction getAddress(topic) {\r\n    if (topic === null || topic === '') return '';\r\n    return `0x${topic.substring(topic.length - 40)}`;\r\n}\r\n\r\nfunction filterLogs (logs, _walletAddress) {\r\n    return logs.filter(each => getAddress(each.topic1) === _walletAddress.toLowerCase() || getAddress(each.topic2) === _walletAddress.toLowerCase());\r\n}\r\n\r\nfunction getValue(topic) {\r\n    return parseInt(topic, 16);\r\n}\r\n\r\nasync function calculateBuySell(logs, _chain, _tokenAddress, _walletAddress) {\r\n    let buy = 0, sell = 0, isFee = true;\r\n    if (await isExcludedFromFee(_chain, _tokenAddress, _walletAddress)) isFee = false;\r\n    logs.map(each => {\r\n        if (getAddress(each.topic1) === _walletAddress.toLowerCase()) {\r\n            if (isFee) {\r\n                sell += getValue(each.data) / 97 * 100;\r\n            } else {\r\n                sell += getValue(each.data);\r\n            }\r\n        } else buy += getValue(each.data);\r\n    })\r\n    let result = {buy: buy, sell: sell};\r\n    return result;\r\n}\r\n\r\nexport const walletExchange = async function(_chain, _tokenAddress, _walletAddress) {\r\n    let logs;\r\n    await getLogsByAddress(_chain, _tokenAddress).then(data=> {\r\n        logs = filterLogs(data, _walletAddress);\r\n    })\r\n    return await calculateBuySell(logs, _chain, _tokenAddress, _walletAddress);\r\n}"],"sourceRoot":""}