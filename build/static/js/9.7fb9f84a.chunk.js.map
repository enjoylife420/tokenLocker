{"version":3,"sources":["pages/Airdrop.js","web3.js","constants.js","api.js"],"names":["connect","state","statistics","props","React","useState","activeStep","setActiveStep","open","setOpen","snackbar","setSnackbar","network","setNetwork","csvData","setCsvData","isCsvSelected","setIsCsvSelected","fileName","setFileName","modalTitle","setModalTitle","modalDes","setModalDes","setIsAllowed","theme","useTheme","classes","useStyles","pools","mobileClasses","mobile","dashboardClasses","dashboard","isMobile","useMediaQuery","token","useSelector","tokenData","dispatch","useDispatch","fileInput","useRef","useWeb3React","account","connector","tokenAddress","values","setValues","processData","dataString","dataStringLines","trim","split","newCsvData","isValid","map","each","splitLine","console","log","newAddress","amount","checkWalletAddress","push","address","useEffect","a","getTokenBalance","tokenBalance","type","USERBALANCE","payload","allowance","allowanceAmount","handleChange","event","target","value","length","getTokenMetadata","CHAINDATA","find","item","name","chain","TOKENDATA","handleOpen","handleClose","networkData","subtitle","url","subData","subTitle","className","root","maxWidth","style","paddingLeft","paddingRight","info","container","direction","justifyContent","alignItems","marginTop","xs","sm","md","display","textAlign","href","explorer","airdropAddress","color","underline","button","variant","wordBreak","cardHeader","title","src","defaultValue","axis","index","onChangeIndex","step","networkSelector","padding","border","borderRadius","onClick","networkImage","alt","networkTitle","networkDes","width","height","backgroundColor","overflow","sx","m","htmlFor","id","onChange","endAdornment","position","showPassword","onMouseDown","preventDefault","edge","label","undefined","symbol","margin","textLeft","tokenImage","tokenTitle","textRight","prevActiveStep","current","click","ref","e","_filePath","_fileName","file","files","reader","FileReader","onload","evt","bstr","result","wb","XLSX","wsname","SheetNames","ws","Sheets","data","sheet_to_csv","header","readAsBinaryString","fileSelect","download","balanceContainer","mobileStepper","steps","nextButton","size","getProvider","then","provider","approveToken","airdrop","disabled","maxSteps","backButton","onClose","top","left","transform","bgcolor","boxShadow","p","component","mt","fontSize","autoHideDuration","message","lockerAddress","swapTokenLockerFactory","serverApi","deposit","date","unlockDate","Date","UTCTimestamp","Math","round","getTime","web3","Web3","contract","eth","Contract","lockerContractAbi","methods","feesInETH","call","feeInETH","BigInt","send","from","pow","toString","status","withdraw","approve","erc20Abi","utils","toBN","deployedContract","getData","axios","get","response","lockerDataByWallet","walletAddress","isAddress","getLastDeployedContract","lastDeployedAddress","deployContract","abi","createTokenLocker","sendTokenVesting","_users","_amounts","_lockHours","_sendAmount","decimals","period","slice","sendLockTokenMany","getClaimTokenList","factoryContract","getAllContracts","allContracts","multicall","Multicall","web3Instance","tryAggregate","contractCallContext","reference","contractAddress","calls","methodName","methodParameters","returnData","Object","entries","results","key","callsReturnContext","returnValues","hex","claimedAmount","lockTimestamp","lastUpdated","lockHours","claimToken","tokenDetail","currentTimestamp","floor","now","reason","passedHours","availableAmount","TOKENADDRESS","apiConfig","headers","serverUrl","_chain","_tokenAddress","tokenMetadata"],"mappings":"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","file":"static/js/9.7fb9f84a.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\n\r\nimport { useTheme } from '@mui/material/styles';\r\nimport {connect, useSelector, useDispatch} from 'react-redux';\r\nimport {useWeb3React} from \"@web3-react/core\";\r\nimport * as XLSX from 'xlsx';\r\n\r\n// ** Import Material UI Components\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\n\r\nimport Container from \"@mui/material/Container\";\r\n\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardHeader from \"@mui/material/CardHeader\";\r\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\r\nimport Modal from '@mui/material/Modal';\r\nimport {  RadioGroup } from \"@mui/material\";\r\nimport MobileStepper from '@mui/material/MobileStepper';\r\nimport Button from '@mui/material/Button';\r\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Search from '@mui/icons-material/Search';\r\nimport { Snackbar } from \"@mui/material\";\r\nimport { Box, IconButton } from \"@mui/material\";\r\n// import KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\n// import KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport Link from \"@mui/material/Link\";\r\n\r\nimport useStyles from \"../assets/styles\";\r\n\r\nimport { TOKENDATA, USERBALANCE } from \"../redux/constants\";\r\n\r\nimport {  CHAINDATA } from \"../constants\";\r\nimport { getTokenMetadata } from \"../api\";\r\nimport { allowance, getTokenBalance, checkWalletAddress, approveToken, airdropAddress, airdrop, explorer } from \"../web3\"\r\n\r\nconst Airdrop = (props) => {\r\n\r\n    const [activeStep, setActiveStep] = React.useState(0);\r\n    const [open, setOpen] = React.useState(false);\r\n    const [snackbar, setSnackbar] = React.useState(false);\r\n    const [network, setNetwork] = useState(\"Avalanche\");\r\n    const [csvData, setCsvData] = useState([]);\r\n    const [isCsvSelected, setIsCsvSelected] = useState(false);\r\n    const [fileName, setFileName] = useState('');\r\n    const [modalTitle, setModalTitle] = useState(\"\");\r\n    const [modalDes, setModalDes] = useState(\"\");\r\n    const [isAllowed, setIsAllowed] = useState(0);// 0: checking, 1: not allowed, 2: allowed\r\n\r\n    const maxSteps = 4;\r\n    const theme = useTheme();\r\n    const classes = useStyles.pools();\r\n    const mobileClasses = useStyles.mobile();\r\n    const dashboardClasses = useStyles.dashboard();\r\n    const isMobile = useMediaQuery(\"(max-width:600px)\");\r\n    const token = useSelector(state => state.tokenData);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    let fileInput = useRef();\r\n\r\n    const style = {\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: 400,\r\n        bgcolor: 'background.paper',\r\n        border: '2px solid #fff',\r\n        borderRadius:'10px',\r\n        boxShadow: 24,\r\n        p: 4,\r\n    };\r\n\r\n    const { account, connector } = useWeb3React();\r\n\r\n    const [values, setValues] = React.useState({\r\n        tokenAddress:\"\",\r\n    });\r\n\r\n    const selectToken = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1)\r\n    }\r\n\r\n    const fileSelect = (e) => {\r\n        const _filePath = e.target.value.split('\\\\');\r\n        const _fileName = _filePath[_filePath.length - 1];\r\n        setFileName(_fileName);\r\n        setIsCsvSelected(false);\r\n        const file = e.target.files[0];\r\n        const reader = new FileReader();\r\n        reader.onload = (evt) => {\r\n            /* Parse data */\r\n            const bstr = evt.target.result;\r\n            const wb = XLSX.read(bstr, { type: 'binary' });\r\n            /* Get first worksheet */\r\n            const wsname = wb.SheetNames[0];\r\n            const ws = wb.Sheets[wsname];\r\n            /* Convert array of arrays */\r\n            const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\r\n            processData(data);\r\n        };\r\n        reader.readAsBinaryString(file);\r\n    }\r\n\r\n    const processData = (dataString) => {\r\n        dataString = dataString.trim('\\r\\n|\\n');\r\n        const dataStringLines = dataString.split(/\\r\\n|\\n/);\r\n        const newCsvData = [];\r\n        let isValid = true;\r\n        dataStringLines.map(each => {\r\n            each = each.trim();\r\n            const splitLine = each.split(',');\r\n            console.log(splitLine)\r\n            const newAddress = splitLine[0];\r\n            const amount = splitLine[1];\r\n            if (!checkWalletAddress(newAddress)) isValid = false;\r\n            newCsvData.push({\r\n                address: newAddress,\r\n                amount: amount\r\n            })\r\n        })\r\n        if (!isValid) {\r\n            console.log(\"invalid\");\r\n            return;\r\n        } else {\r\n            setCsvData(newCsvData);\r\n            setIsCsvSelected(true);\r\n        }\r\n    }\r\n\r\n    const handleNext = () => {\r\n        if (activeStep === 0) {\r\n            if (!account) {\r\n                setModalTitle(\"Please connect Wallet\");\r\n                setModalDes(`Before you can create a lock on ${network}, you must connect your wallet to ${network} network on your wallet. Use testnet for test transactions, and mainnet for real token locks.`);\r\n                handleOpen();\r\n            }else {\r\n                setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n            }\r\n        } else if (activeStep === 1 ) {\r\n            if (!token.symbol) {\r\n                setModalTitle(\"Please select Token\");\r\n                setModalDes(`Before you can create a lock on ${network}, you must select token on your wallet. Use testnet for test transactions, and mainnet for real token locks.`);\r\n                handleOpen();\r\n            }else {\r\n                setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n            }\r\n        } else if (activeStep === 2 ) {\r\n            if (!isCsvSelected) {\r\n                setModalTitle(\"Please select csv file\");\r\n                handleOpen();\r\n            } else {\r\n                connector.getProvider().then((provider) => {\r\n                    console.log(token.address, account, airdropAddress);\r\n                    approveToken(provider, token.address, account, airdropAddress).then((state) => {\r\n                        airdrop(provider, csvData, token.address, account).then((state) => {\r\n                            setActiveStep(0);\r\n                        })\r\n                    })\r\n                })\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(async () => {\r\n        setIsAllowed(0);\r\n        if (!account || !token.address) return;\r\n        const tokenBalance = await getTokenBalance(token, account);\r\n        dispatch({type:USERBALANCE, payload: tokenBalance});\r\n        const allowanceAmount = await allowance(token, account);\r\n        if (allowanceAmount < 115792089237316195423570985008687907853269984665640564039457584007913129639935) setIsAllowed(1);\r\n        else setIsAllowed(2);\r\n    }, [account, token, connector])\r\n\r\n    const handleChange = async (event) => {\r\n        setValues({ tokenAddress: event.target.value });\r\n        if (event.target.value.length == 42) {\r\n            const address = event.target.value;\r\n            try {\r\n                const tokenData = await getTokenMetadata(CHAINDATA.find((item)=>item.name==network).chain, address);\r\n                dispatch({\r\n                    type:TOKENDATA,\r\n                    payload: tokenData[0]\r\n                })\r\n            } catch(e) {\r\n                dispatch({\r\n                    type:TOKENDATA,\r\n                    payload: {}\r\n                })\r\n            }\r\n        }else {\r\n            dispatch({\r\n                type:TOKENDATA,\r\n                payload: {}\r\n            })\r\n        }\r\n    };\r\n    \r\n    const handleClickSearch = () => {\r\n        setValues({\r\n            ...values,\r\n            showPassword: !values.showPassword,\r\n        });\r\n    };\r\n    \r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n    };\r\n    \r\n    const handleBack = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    };\r\n    \r\n    const handleStepChange = (step) => {\r\n        setActiveStep(step);\r\n    };\r\n\r\n    const handleOpen = () => setOpen(true);\r\n    const handleClose = () => setOpen(false);\r\n\r\n    const handleSnackbarClose = () => setSnackbar(false);\r\n\r\n    const networkData= [\r\n        {name:\"Avalanche\", subtitle:\"Choose if your coin is built on AVAX\", url:\"/networks/avalanche.png\", subData:[{name:\"Project Tokens\", subTitle:\"Regular BEP-20 Project Token\", url:\"/project.png\"}]},\r\n    ]\r\n    return (\r\n        <Container className={classes.root} maxWidth=\"lg\" style={{paddingLeft:20, paddingRight:20}}>\r\n            <Box className={classes.info}>\r\n                <Grid container direction=\"row\" justifyContent=\"space-evenly\" alignItems=\"center\" >\r\n                    <Grid className={isMobile ? `${mobileClasses.root} grid text-center`  : \"grid text-center\"} style={{marginTop:40}} item xs={12} sm={12} md={6} >\r\n                        <div style={{maxWidth:400, display:'inline-block', textAlign:'left'}}>\r\n                            <h1>Airdrop your token to multi address.</h1>\r\n                            <p>All tokens are immediately sent to multi users in one transaction.</p>\r\n                            <Link\r\n                                href={`${explorer}/address/${airdropAddress}`}\r\n                                target=\"_blank\"\r\n                                color=\"blue\"\r\n                                underline=\"none\"\r\n                                className={classes.button}\r\n                            ><Button variant=\"contained\">Explore Contract</Button></Link>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid className={isMobile ? `${mobileClasses.root} grid`  : \"grid\"} style={{marginTop:40, wordBreak: \"break-all\"}} item xs={12} sm={12} md={6} >\r\n                        <Card className=\"card\">\r\n                            <CardHeader\r\n                                className={dashboardClasses.cardHeader}\r\n                                title=\"Token Airdrop\"\r\n                            />\r\n                            <CardContent >\r\n                                <img src=\"/lock.png\" />\r\n                                <RadioGroup\r\n                                    aria-labelledby=\"demo-radio-buttons-group-label\"\r\n                                    defaultValue=\"female\"\r\n                                    name=\"radio-buttons-group\"\r\n                                >\r\n                                    <SwipeableViews\r\n                                        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                                        index={activeStep}\r\n                                        onChangeIndex={handleStepChange}\r\n                                    >\r\n                                       \r\n                                        <div key={1} style={{paddingLeft:1, paddingRight:1}}>\r\n                                            <p style={{textAlign:'center'}} color=\"textSecondary\">\r\n                                                Choose the blockchain network.\r\n                                            </p>\r\n                                            {\r\n                                                networkData.map((item)=>\r\n                                                <Grid\r\n                                                    className={classes.networkSelector}\r\n                                                    container\r\n                                                    direction=\"row\"\r\n                                                    justifyContent=\"space-evenly\"\r\n                                                    alignItems=\"center\"\r\n                                                    style={{padding:\"10px 0px\", border:item.name==network?\"1px solid #e55370\":\"1px solid transparent\", borderRadius:'5px'}}\r\n                                                    key={item.name}\r\n                                                    onClick = {()=>setNetwork(item.name)}\r\n                                                >\r\n                                                    <Grid item  xs={10} sm={11} md={11}>\r\n                                                        <Grid \r\n                                                            container\r\n                                                            direction=\"row\"\r\n                                                            \r\n                                                            alignItems=\"center\"\r\n                                                        >\r\n                                                            <Grid item className=\"text-center\" xs={3} sm={2} md={2}>\r\n                                                                <img className={dashboardClasses.networkImage} src={item.url} alt=\"network\" />\r\n                                                            </Grid>\r\n                                                            <Grid item   xs={9} sm={10} md={10}>\r\n                                                                <p  color=\"textSecondary\" className={dashboardClasses.networkTitle}>\r\n                                                                    {item.name}\r\n                                                                </p>\r\n                                                                <p color=\"textSecondary\" className={dashboardClasses.networkDes}>\r\n                                                                    {item.subtitle}\r\n                                                                </p>\r\n                                                            </Grid>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                    <Grid item  className=\"text-center\" xs={2} sm={1} md={1}>\r\n                                                        {item.name==network ? <div style={{width:\"20px\", height:'20px', borderRadius:\"10px\", backgroundColor:'#e55370', display:'inline-block'}} />: <div style={{width:\"20px\", height:'20px', borderRadius:\"10px\", border:'1px solid #e55370', display:'inline-block'}} />}\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                )\r\n                                            }\r\n                                        </div>\r\n                                        <div key={2} style={{paddingLeft:1, paddingRight:1, overflow: \"hidden\"}}>\r\n                                            <p className=\"text-center\" color=\"textSecondary\">\r\n                                                Please insert the token contract address.\r\n                                            </p>\r\n                                            <FormControl sx={{ m: 1, width: '25ch' }} variant=\"outlined\" style={{width:'-webkit-fill-available'}}>\r\n                                                <InputLabel htmlFor=\"outlined-adornment-password\">Address</InputLabel>\r\n                                                <OutlinedInput\r\n                                                    id=\"outlined-adornment-password\"\r\n                                                    type=\"text\"\r\n                                                    value={values.tokenAddress}\r\n                                                    onChange={handleChange}\r\n                                                    // onKeyDown={handleChange}\r\n                                                    endAdornment={\r\n                                                    <InputAdornment position=\"end\">\r\n                                                        <IconButton\r\n                                                        aria-label=\"toggle search\"\r\n                                                        onClick={handleClickSearch}\r\n                                                        onMouseDown={handleMouseDownPassword}\r\n                                                        edge=\"end\"\r\n                                                        >\r\n                                                        <Search />\r\n                                                        </IconButton>\r\n                                                    </InputAdornment>\r\n                                                    }\r\n                                                    label=\"Password\"\r\n                                                />\r\n                                            </FormControl>\r\n                                            \r\n                                            {\r\n                                                token != undefined && token.symbol !=undefined && token.symbol !=\"\" &&\r\n                                                <div style={{paddingLeft:20, paddingRight:20}}>\r\n                                                    <p style={{margin:\"0px\"}}>Token Found</p>\r\n                                                    <Grid \r\n                                                        container\r\n                                                        direction=\"row\"\r\n                                                        justifyContent=\"space-between\"\r\n                                                        alignItems=\"center\"\r\n                                                    >\r\n                                                        <Grid item className={dashboardClasses.textLeft} xs={6} sm={6} md={6}>\r\n                                                            <img className={dashboardClasses.tokenImage} src=\"/lock.png\" alt=\"network\" />\r\n                                                            <p  color=\"textSecondary\" className={dashboardClasses.tokenTitle}>\r\n                                                                {token.symbol}\r\n                                                            </p>\r\n                                                        </Grid>\r\n                                                        <Grid item className={dashboardClasses.textRight}  xs={6} sm={6} md={6}>\r\n                                                            <Button variant=\"contained\" color=\"error\" sm={12} onClick={selectToken}>Select</Button>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </div>\r\n                                            }\r\n                                            \r\n                                        </div>\r\n                                        <div key={3} style={{paddingLeft:1, paddingRight:1}}>\r\n                                            <p className=\"text-center\">Click the button below to upload a CSV from your device</p>\r\n                                            <div className=\"text-center\">\r\n                                                <Button variant=\"contained\" onClick={()=>fileInput.current.click()}>Upload CSV</Button>\r\n                                                <input \r\n                                                    ref={fileInput} \r\n                                                    type=\"file\" \r\n                                                    style={{ display: 'none' }} \r\n                                                    onChange = {(e)=>fileSelect(e)}\r\n                                                />\r\n                                            </div>\r\n                                            { fileName ? <div className=\"text-center\" style={{margin:\"10px\"}}>\r\n                                                {fileName}\r\n                                            </div> :\r\n                                            <div className=\"text-center\" style={{margin:\"10px\"}}>\r\n                                                <a  href=\"/Airdrop.csv\" style={{color:\"#e55370\"}} download>Click here to download sample CSV</a>\r\n                                            </div>}\r\n                                            <Grid \r\n                                                container\r\n                                                direction=\"row\"\r\n                                                justifyContent=\"space-between\"\r\n                                                alignItems=\"center\"\r\n                                                className={dashboardClasses.balanceContainer}\r\n                                            >\r\n                                                <Grid item className={dashboardClasses.textLeft} xs={4} sm={4} md={4}>\r\n                                                   <p style={{margin:0}}>Address</p>\r\n                                                </Grid>\r\n                                                <Grid item className={dashboardClasses.textRight}  xs={4} sm={4} md={4}>\r\n                                                    <p style={{margin:0}}>Amount</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </div>\r\n                                    </SwipeableViews>\r\n                                    <MobileStepper\r\n                                        className={dashboardClasses.mobileStepper}\r\n                                        steps={maxSteps}\r\n                                        position=\"static\"\r\n                                        activeStep={activeStep}\r\n                                        nextButton={\r\n                                        <Button\r\n                                            size=\"small\"\r\n                                            onClick={handleNext}\r\n                                            disabled={activeStep === maxSteps - 1}\r\n                                        >\r\n                                            Next\r\n                                            {theme.direction === 'rtl' ? (\r\n                                            <KeyboardArrowLeft />\r\n                                            ) : (\r\n                                            <KeyboardArrowRight />\r\n                                            )}\r\n                                        </Button>\r\n                                        }\r\n                                        backButton={\r\n                                        <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\r\n                                            {theme.direction === 'rtl' ? (\r\n                                            <KeyboardArrowRight />\r\n                                            ) : (\r\n                                            <KeyboardArrowLeft />\r\n                                            )}\r\n                                            Back\r\n                                        </Button>\r\n                                        }\r\n                                    />\r\n                                </RadioGroup>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                    \r\n                </Grid>\r\n            </Box>\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"modal-modal-title\"\r\n                aria-describedby=\"modal-modal-description\"\r\n            >\r\n                <Box sx={style}>\r\n                    \r\n                    {networkData.find((item)=>item.name==network) && <div style={{textAlign:'center'}}><img style={{width:\"50px\"}} src={networkData.find((item)=>item.name==network).url} alt=\"network\" /></div>}\r\n                    <h3 id=\"modal-modal-title\" variant=\"h6\" component=\"h2\" style={{textAlign:'center', marginTop:0}}>\r\n                        {modalTitle}\r\n                    </h3>\r\n                    <p id=\"modal-modal-description\" sx={{ mt: 2 }} style={{textAlign:'center', fontSize:12, color:'grey'}}>\r\n                        {modalDes}\r\n                    </p>\r\n                    <Button variant=\"contained\" color=\"error\" style={{width:'100%'}} onClick={handleClose}>Close</Button>\r\n                </Box>\r\n            </Modal>\r\n            <Snackbar\r\n                open={snackbar}\r\n                autoHideDuration={600}\r\n                style={{width:100}}\r\n                onClose={handleSnackbarClose}\r\n                message=\"Successfully Copied to Clipboard\"\r\n            />\r\n        </Container >\r\n    )\r\n}\r\nconst mapStateToProps = state => ({\r\n    statistics: state.statistics,\r\n})\r\n\r\nexport default connect(mapStateToProps)(Airdrop);\r\n","import Web3 from \"web3\"\r\nimport {\r\n    Multicall\r\n  } from 'ethereum-multicall';\r\n\r\nimport lockerContractAbi from \"./locker_abi.json\"\r\nimport erc20Abi from \"./erc20_abi.json\"\r\nimport liquidityPoolAbi from \"./liquidityPool_abi.json\"\r\nimport axios from 'axios'\r\n\r\n// const lockerAddress = \"0x9D1018Cf42c12D78D073C38A79eCaB18A4FDc2A5\";\r\n// const lockerAddress = \"0x7E73A50B8F78F8Ad584d86Aab0ba966d1BE33bf1\";\r\n// const lockerAddress = \"0x54eFc25b4B3d0f08494B685F41ccd834bb95AA23\";\r\n// const lockerAddress = \"0xC25689105C2F54cd7916e5c8101cFEBA7a08093E\";\r\nexport const lockerAddress = \"0xe7B5c1aFffe4297adE4527C41CA9800C7905E7Eb\";\r\n// const swapTokenLockerFactory = '0x6a33a15d826e59792b60dec950e8af2fa7d58f9e';\r\nexport const swapTokenLockerFactory = '0x74818F8D9C0666ab332Af6B8DCBc448e1F10A133';\r\nexport const airdropAddress = \"0xa155DF21209A845dbf894070b51Cc44466F23d6e\";\r\n\r\n// const provider = \"https://api.avax.network/ext/bc/C/rpc\";\r\nconst provider = \"https://api.avax-test.network/ext/bc/C/rpc\";\r\n\r\nconst serverApi = 'https://snowprotocol.io/api';\r\n\r\nexport const explorer = \"https://testnet.snowtrace.io\";\r\n\r\nexport const deposit = async (provider, token, amount, date, account) => {\r\n    let unlockDate = new Date(date);\r\n    let UTCTimestamp = Math.round(unlockDate.getTime() / 1000)\r\n    let web3 = new Web3(provider);\r\n    let contract = new web3.eth.Contract(lockerContractAbi, lockerAddress);\r\n    let feeInETH = await contract.methods.feesInETH().call();\r\n    let result = await contract.methods[\"lockTokens\"](token.address, account, BigInt(amount), UTCTimestamp).send({from: account, value: BigInt(feeInETH * Math.pow(10, 18)).toString()});\r\n    return result.status;\r\n}\r\n\r\nexport const withdraw = async (provider, id, account) => {\r\n    let web3 = new Web3(provider);\r\n    let contract = new web3.eth.Contract(lockerContractAbi, lockerAddress);\r\n    let result = await contract.methods[\"withdrawTokens\"](id).send({\r\n        from: account\r\n    });\r\n    return result.status;\r\n}\r\n\r\nexport const approve = async (provider, token, account) => {\r\n    let web3 = new Web3(provider);\r\n    let contract = new web3.eth.Contract(erc20Abi, token.address);\r\n    let result = await contract.methods[\"approve\"](lockerAddress, web3.utils.toBN(\"115792089237316195423570985008687907853269984665640564039457584007913129639935\")).send({from: account});\r\n    return result.status;\r\n}\r\n\r\nexport const approveToken = async (provider, token, account, deployedContract) => {\r\n    let web3 = new Web3(provider);\r\n    let contract = new web3.eth.Contract(erc20Abi, token);\r\n    let result = await contract.methods[\"approve\"](deployedContract, web3.utils.toBN(\"115792089237316195423570985008687907853269984665640564039457584007913129639935\")).send({from: account});\r\n    return result.status;\r\n}\r\n\r\nexport const allowance = async (token, account) => {\r\n    let web3 = new Web3(provider);\r\n    let contract = new web3.eth.Contract(erc20Abi, token.address);\r\n    let result = await contract.methods[\"allowance\"](account, lockerAddress).call();\r\n    return result;\r\n}\r\n\r\nexport const getTokenBalance = async (token, account) => {\r\n    let web3 = new Web3(provider);\r\n    let contract = new web3.eth.Contract(erc20Abi, token.address);\r\n    let result = await contract.methods[\"balanceOf\"](account).call();\r\n    return result;\r\n}\r\n\r\nexport const getRawData = async (account) => {\r\n    let web3 = new Web3(provider);\r\n    let contract = new web3.eth.Contract(lockerContractAbi, lockerAddress);\r\n    let depositIds = await contract.methods[\"getAllDepositIds\"]().call();\r\n    if (!depositIds.length) return []\r\n    const multicall = new Multicall({ web3Instance: web3, tryAggregate: true });\r\n    let contractCallContext = {\r\n        reference: \"lockedToken\",\r\n        contractAddress: lockerAddress,\r\n        abi: lockerContractAbi,\r\n        calls: depositIds.map(each => {\r\n            return { reference: 'lockedTokensCall', methodName: 'lockedToken', methodParameters: [each] }\r\n        })\r\n    }\r\n    let response = await multicall.call(contractCallContext);\r\n    const returnValues = [];\r\n    response.results.lockedToken.callsReturnContext.map(each => {\r\n        const returnValue = {\r\n            id: each.methodParameters[0],\r\n            token: each.returnValues[0],\r\n            owner: each.returnValues[1],\r\n            amount: BigInt(parseInt(each.returnValues[2].hex, 16)).toString(),\r\n            timestamp: parseInt(each.returnValues[3].hex, 16),\r\n            isWithdrawn: each.returnValues[4]\r\n        }\r\n        if (returnValue.owner.toLowerCase() === account.toLowerCase()) returnValues.push(returnValue);\r\n    })\r\n    return returnValues;\r\n\r\n        // let lockedTokenLists = [];\r\n        // for (const [key, value] of Object.entries(response.results)) {\r\n        //     lockedTokenLists.push(value.callsReturnContext[0][\"returnValues\"][0]);\r\n        // }\r\n        // contractCallContext = [];\r\n        // for (let i = 0; i < length; i++) {\r\n        //     contractCallContext.push({\r\n        //         reference: i,\r\n        //         contractAddress: lockerAddress,\r\n        //         abi: lockerContractAbi,\r\n        //         calls: [{ reference: 'lockedTokensCall', methodName: 'getUserTokenInfo', methodParameters: [lockedTokenLists[i], account] }]\r\n        //     })\r\n        // }\r\n        // response = await multicall.call(contractCallContext);\r\n        // let userInfo = [];\r\n        // for (const [key, value] of Object.entries(response.results)) {\r\n        //     if (web3.utils.hexToNumberString(value.callsReturnContext[0].returnValues[2].hex) == '0') continue;\r\n        //     userInfo.push({token: lockedTokenLists[key], deposited: web3.utils.hexToNumberString(value.callsReturnContext[0].returnValues[0].hex), withdrawed: web3.utils.hexToNumberString(value.callsReturnContext[0].returnValues[1].hex), vestLength: web3.utils.hexToNumberString(value.callsReturnContext[0].returnValues[2].hex)})\r\n        // }\r\n        // if (!userInfo.length) return [];\r\n        // contractCallContext = [];\r\n        // for (let i = 0; i < userInfo.length; i++) {\r\n        //     let context = {\r\n        //         reference: i,\r\n        //         contractAddress: lockerAddress,\r\n        //         abi: lockerContractAbi,\r\n        //         calls: []\r\n        //     }\r\n        //     for (let j = 0; j < userInfo[i][\"vestLength\"]; j++) {\r\n        //         context.calls.push({ reference: 'getUserVestingAtIndexCall', methodName: 'getUserVestingAtIndex', methodParameters: [userInfo[i].token, account, j] });\r\n        //     }\r\n        //     contractCallContext.push(context)\r\n        // }\r\n        // response = await multicall.call(contractCallContext);\r\n        // for (const [key, value] of Object.entries(response.results)) {\r\n        //     userInfo[key][\"vesting\"] = value.callsReturnContext.map(each => {\r\n        //         return each.returnValues.map(data => {\r\n        //             return web3.utils.hexToNumberString(data.hex)\r\n        //         })\r\n        //     })\r\n        // }\r\n        // contractCallContext = [];\r\n        // for (let i = 0; i < userInfo.length; i++) {\r\n        //     let context = {\r\n        //         reference: i,\r\n        //         contractAddress: userInfo[i][\"token\"],\r\n        //         abi: erc20Abi,\r\n        //         calls: [{ reference: 'decimalsCall', methodName: 'decimals' }, { reference: 'symbolCall', methodName: 'symbol'}]\r\n        //     }\r\n        //     contractCallContext.push(context);\r\n        // }\r\n        // response = await multicall.call(contractCallContext);\r\n        // for (const [key, value] of Object.entries(response.results)) {\r\n        //     userInfo[key][\"decimals\"] = value.callsReturnContext[0][\"returnValues\"][0];\r\n        //     userInfo[key][\"symbol\"] = value.callsReturnContext[1][\"returnValues\"][0];\r\n        // }\r\n        // let currentTime = Math.round(Date.now() / 1000);\r\n        // // console.log(userInfo)\r\n        // userInfo = userInfo.map(each => {\r\n        //     console.log(each);\r\n        //     let withdrawable = web3.utils.toBN(0);\r\n        //     each.vesting.map((eachVest) => {\r\n        //         if (Number(eachVest[0]) < currentTime) withdrawable = withdrawable.add(web3.utils.toBN(eachVest[1]));\r\n        //     })\r\n        //     withdrawable = withdrawable.sub(web3.utils.toBN(each.withdrawed));\r\n        //     each.withdrawable = withdrawable.toString();\r\n        //     return each;\r\n        // })\r\n    }\r\n    \r\nexport const getData = async (account) => {\r\n    const response = await axios.get(`${serverApi}/locker/lockedtokens/${account}`);\r\n    const lockerDataByWallet = response.data;\r\n    return lockerDataByWallet;\r\n}\r\n\r\nexport const getLockedTokenDetails = async (tokenAddress, account) => {\r\n\r\n    // const tokenData = data.find(each => each.address === tokenAddress);\r\n    \r\n    const rawData = await getRawData(account);\r\n    let web3 = new Web3(provider);\r\n\r\n    let tokenLocked = BigInt(0);\r\n    rawData.map(each => {\r\n        if (each.token === tokenAddress && !each.isWithdrawn) tokenLocked = tokenLocked + BigInt(each.amount);\r\n    });\r\n    // console.log(rawData)\r\n    const tokenContract = new web3.eth.Contract(erc20Abi, tokenAddress);\r\n    let symbol = await tokenContract.methods.symbol().call();\r\n    let decimals = await tokenContract.methods.decimals().call();\r\n    let totalSupply = await tokenContract.methods.totalSupply().call();\r\n    let liquidityLocked = BigInt(0);\r\n    let tokenLockHistory = [];\r\n\r\n    const multicall = new Multicall({ web3Instance: web3, tryAggregate: true });\r\n    let contractCallContext = rawData.map((each, index) => {\r\n        return {\r\n            reference: index,\r\n            contractAddress: each.token,\r\n            abi: erc20Abi,\r\n            calls: [{ reference: 'symbolsCall', methodName: 'symbol' }]\r\n        }\r\n    })\r\n    let response = await multicall.call(contractCallContext);\r\n    let symbols = [];\r\n    for (const [key, value] of Object.entries(response.results)) {\r\n        symbols.push(value.callsReturnContext[0].returnValues[0]);\r\n    }\r\n    // console.log(rawData)\r\n    for (let i = 0; i < rawData.length; i++) {\r\n        let each = rawData[i];\r\n        let address = each.token;\r\n        let ownerAddress = each.owner;\r\n        let tokenAmount = each.amount;\r\n        let timestamp = each.timestamp;\r\n        let isWithdrawn = each.isWithdrawn;\r\n        //default token\r\n        if (address.toLowerCase() === tokenAddress.toLowerCase()) tokenLockHistory.push({id: each.id, address: address, owner: ownerAddress, tokenAmount: tokenAmount, timestamp: timestamp, isWithdrawn: isWithdrawn});\r\n        //pool token\r\n        else if (symbols[i] === 'HUL') {\r\n            let poolContract = new web3.eth.Contract(liquidityPoolAbi, each.token);\r\n            let token0 = await poolContract.methods.token0().call();\r\n            let token1 = await poolContract.methods.token1().call();\r\n            if (token0.toLowerCase() === tokenAddress.toLowerCase() || token1.toLowerCase() === tokenAddress.toLowerCase()) {\r\n                let totalSupply = await poolContract.methods.totalSupply().call();\r\n                let baseTokenTotalAmount = await tokenContract.methods.balanceOf(address).call();\r\n                let baseTokenAmount = BigInt(baseTokenTotalAmount) * BigInt(tokenAmount) / BigInt(totalSupply);\r\n                if (!each.isWithdrawn) liquidityLocked = liquidityLocked + baseTokenAmount;\r\n                tokenLockHistory.push({id: each.id, isPool: true, address: address, owner: ownerAddress, tokenAmount: tokenAmount, baseTokenAmount: baseTokenAmount.toString(), timestamp: timestamp, isWithdrawn: isWithdrawn});\r\n            }\r\n        }\r\n    }\r\n    // let tokenSymbol = await tokenContract.methods.symbol().call();\r\n    // let tokenDecimals = await tokenContract.methods.decimals().call();\r\n    // let tokenLocked = await tokenContract.methods.balanceOf(lockerAddress).call();\r\n    // let tokenTotalSupply = await tokenContract.methods.totalSupply().call();\r\n\r\n    let lockerContract = new web3.eth.Contract(lockerContractAbi, lockerAddress);\r\n    let depositEvents = await lockerContract.getPastEvents(\"LogLocking\", {\r\n        fromBlock: 0\r\n    })\r\n    let withdrawEvents = await lockerContract.getPastEvents(\"LogWithdrawal\", {\r\n        fromBlock: 0\r\n    })\r\n\r\n    // let tokenTransferEvents = await tokenContract.getPastEvents(\"Transfer\",{\r\n    //     fromBlock: 0,\r\n    //     toBlock: \"latest\",\r\n    //     filter: {\r\n    //         to: lockerAddress\r\n    //     }\r\n    // })\r\n    // let tokenTransferTransactions = await Promise.all(tokenTransferEvents.map(each => web3.eth.getTransaction(each.transactionHash)))\r\n    // tokenTransferTransactions = tokenTransferTransactions.filter(each => each.input.length === 266);\r\n    \r\n    \r\n    for(let i=0; i<depositEvents.length; i++) {\r\n        let blockDetail = await web3.eth.getBlock(depositEvents[i].blockNumber);\r\n        depositEvents[i].timestamp = blockDetail.timestamp;\r\n    }\r\n    for(let i=0; i<withdrawEvents.length; i++) {\r\n        let blockDetail = await web3.eth.getBlock(withdrawEvents[i].blockNumber);\r\n        withdrawEvents[i].timestamp = blockDetail.timestamp;\r\n    }\r\n    let events = [], j = 0;\r\n    for(let i=0; i<depositEvents.length;i++) {\r\n        if(withdrawEvents[j] && withdrawEvents[j].returnValues.index === depositEvents[i].returnValues.index) {\r\n            events.push({deposit: depositEvents[i], withdraw: withdrawEvents[j]});\r\n            j++;\r\n        } else {\r\n            events.push({deposit: depositEvents[i]});\r\n        }\r\n    }\r\n\r\n    return {\r\n        address: tokenAddress,\r\n        symbol: symbol,\r\n        decimals: decimals,\r\n        totalSupply: totalSupply,\r\n        liquidityLocked: liquidityLocked,\r\n        tokenLocked: tokenLocked,\r\n        history: tokenLockHistory,\r\n        events: events\r\n    }\r\n}\r\n\r\nexport const checkWalletAddress = (walletAddress) => {\r\n    let web3 = new Web3(provider);\r\n    return web3.utils.isAddress(walletAddress);\r\n}\r\n\r\nexport const getLastDeployedContract = async (account) => {\r\n    const response = await axios.get(`${serverApi}/vesting/lastDeployed/${account}`);\r\n    const lastDeployedAddress = response.data;\r\n    return lastDeployedAddress;\r\n}\r\n\r\nexport const deployContract = async (provider, account, token) => {\r\n    const web3 = new Web3(provider);\r\n    const abi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"createTokenLocker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]\r\n    const contract = new web3.eth.Contract(abi, swapTokenLockerFactory);\r\n    let result = contract.methods.createTokenLocker(token).send({\r\n        from: account\r\n    })\r\n    return result;\r\n}\r\n\r\nexport const sendTokenVesting = async (provider, deployedContract, csvData, token, account) => {\r\n    let _users = [], _amounts = [], _lockHours = [], _sendAmount = BigInt(0);\r\n    const web3 = new Web3(provider);\r\n    let abi = [{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    let contract = new web3.eth.Contract(abi, token);\r\n    let decimals = await contract.methods.decimals().call();\r\n    csvData.map(each => {\r\n        _users.push(each.address);\r\n        _amounts.push(BigInt(each.amount * Math.pow(10, decimals)).toString());\r\n        switch(each.period[each.period.length - 1]) {\r\n            case 'M':\r\n                _lockHours.push(each.period.slice(0, each.period.length - 1) * 30 * 24);\r\n                break;\r\n            case 'W':\r\n                _lockHours.push(each.period.slice(0, each.period.length - 1) * 7 * 24);\r\n                break;\r\n            case 'D':\r\n                _lockHours.push(each.period.slice(0, each.period.length - 1) * 24);\r\n                break;\r\n            case 'h':\r\n                _lockHours.push(each.period.slice(0, each.period.length - 1));\r\n                \r\n        }\r\n        _sendAmount += BigInt(each.amount * Math.pow(10, decimals));\r\n    })\r\n    _sendAmount = _sendAmount.toString();\r\n    abi = [{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint128[]\",\"name\":\"_amounts\",\"type\":\"uint128[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_lockHours\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256\",\"name\":\"_sendAmount\",\"type\":\"uint256\"}],\"name\":\"sendLockTokenMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\r\n    \r\n    contract = new web3.eth.Contract(abi, deployedContract)\r\n    let feesInETH = await contract.methods.feesInETH().call();\r\n    console.log(_users, _amounts, _lockHours, _sendAmount, account)\r\n    let result = await contract.methods.sendLockTokenMany(_users, _amounts, _lockHours, _sendAmount).send({\r\n        from: account,\r\n        value: BigInt(feesInETH * Math.pow(10, 18)).toString()\r\n    });\r\n    return result;\r\n}\r\n\r\nexport const getClaimTokenList = async (address) => {\r\n    const web3 = new Web3(provider);\r\n    let factoryContract, abi, erc20Abi, allContracts, response, multicall, contractCallContext;\r\n    abi = [{\"inputs\":[],\"name\":\"getAllContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    factoryContract = new web3.eth.Contract(abi, swapTokenLockerFactory);\r\n    allContracts = await factoryContract.methods.getAllContracts().call();\r\n    multicall = new Multicall({ web3Instance: web3, tryAggregate: true });\r\n    abi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLockData\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    erc20Abi = [{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]\r\n    contractCallContext = allContracts.map((each, index) => {\r\n        return {\r\n            reference: index,\r\n            contractAddress: each,\r\n            abi: abi,\r\n            calls: [\r\n                { reference: 'getLockDataCall', methodName: 'getLockData', methodParameters: [address] },\r\n                { reference: 'getTokenCall', methodName: 'getToken'}\r\n            ]\r\n        }\r\n    })\r\n    response = await multicall.call(contractCallContext);\r\n    let returnData = [];\r\n    contractCallContext = [];\r\n    for (const [key, value] of Object.entries(response.results)) {\r\n        let amount = BigInt(value.callsReturnContext[0].returnValues[0].hex).toString();\r\n        let claimedAmount = BigInt(value.callsReturnContext[0].returnValues[1].hex).toString();\r\n        let lockTimestamp = BigInt(value.callsReturnContext[0].returnValues[2].hex).toString();\r\n        let lastUpdated = BigInt(value.callsReturnContext[0].returnValues[3].hex).toString();\r\n        let lockHours = value.callsReturnContext[0].returnValues[4];\r\n        let contract = allContracts[key];\r\n        let token = value.callsReturnContext[1].returnValues[0];\r\n        if (amount !== '0') {\r\n            contractCallContext.push({\r\n                reference: returnData.length,\r\n                contractAddress: token,\r\n                abi: erc20Abi,\r\n                calls: [\r\n                    { reference: 'nameCall', methodName: 'name' },\r\n                    { reference: 'decimalsCall', methodName: 'decimals' },\r\n                    { reference: 'symbolCall', methodName: 'symbol' }\r\n                ]\r\n            })\r\n            returnData.push({\r\n                amount: amount,\r\n                claimedAmount: claimedAmount,\r\n                lockTimestamp: lockTimestamp,\r\n                lastUpdated: lastUpdated,\r\n                lockHours: lockHours,\r\n                contract: contract,\r\n                token: {\r\n                    address: token\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    response = await multicall.call(contractCallContext);\r\n    for (const [key, value] of Object.entries(response.results)) {\r\n        let name = value.callsReturnContext[0].returnValues[0];\r\n        let symbol = value.callsReturnContext[2].returnValues[0];\r\n        let decimals = value.callsReturnContext[1].returnValues[0];\r\n        returnData[key].token.name = name;\r\n        returnData[key].token.symbol = symbol;\r\n        returnData[key].token.decimals = decimals;\r\n    }\r\n    return returnData;\r\n}\r\n\r\nexport const claimToken = async (provider, tokenDetail, account) => {\r\n    let currentTimestamp = Math.floor(Date.now() / 1000);\r\n    if (currentTimestamp - tokenDetail.lastUpdated < 3600) return {state: false, reason: 'Wait to next claim available'};\r\n    const passedHours = Math.floor((currentTimestamp - tokenDetail.lockTimestamp) / 3600);\r\n    const availableAmount = BigInt(Math.floor(tokenDetail.amount * passedHours / tokenDetail.lockHours) - tokenDetail.claimedAmount).toString();\r\n    const web3 = new Web3(provider);\r\n    const abi = [{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"}],\"name\":\"claimToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\r\n    const contract = new web3.eth.Contract(abi, tokenDetail.contract);\r\n    const response = await contract.methods.claimToken(availableAmount).send({\r\n        from: account\r\n    });\r\n    console.log(response);\r\n}\r\n\r\nexport const airdrop = async (provider, csvData, token, account) => {\r\n    let _users = [], _amounts = [];\r\n    const web3 = new Web3(provider);\r\n    let abi = [{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    console.log(token)\r\n    let contract = new web3.eth.Contract(abi, token);\r\n    let decimals = await contract.methods.decimals().call();\r\n    csvData.map(each => {\r\n        _users.push(each.address);\r\n        _amounts.push(BigInt(each.amount * Math.pow(10, decimals)).toString());\r\n    })\r\n    abi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint128[]\",\"name\":\"_amounts\",\"type\":\"uint128[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]\r\n    contract = new web3.eth.Contract(abi, airdropAddress);\r\n    let result = await contract.methods.airdrop(token, _users, _amounts).send({\r\n        from: account\r\n    });\r\n    return result;\r\n}","export const CHAIN = '0xa869';\r\n// export const TOKENADDRESS = '0x0bbfecb93e99765ee8424cf6d8a0bcb483a721d6';\r\n// export const CHAIN = '0xa869';\r\nexport const TOKENADDRESS = '0x2F910059b8356D8AB31663B6ae027eEe7A3c4C00';\r\nexport const coinGeckoUrl = `https://www.coingecko.com`;\r\nexport const coinMarketCapUrl = `https://coinmarketcap.com`;\r\nexport const twitterUrl = `https://twitter.com`;\r\nexport const telegramUrl = `https://t.me`;\r\nexport const traderJoeUrl = `https://traderjoexyz.com/#/trade?outputCurrency=${TOKENADDRESS}`;\r\nexport const snowtraceUrl = `https://snowtrace.io/address/${TOKENADDRESS}`;\r\nexport const dexscreenerUrl = `https://dexscreener.com/avalanche`;\r\n\r\nexport const CHAINDATA = [\r\n    {name:\"Avalanche\", chain: CHAIN}\r\n];\r\n","import axios from 'axios';\r\nimport { walletAddress } from './redux/reducers';\r\n\r\nconst apiKey = 'SvMhtTsmQ239NmpwWjnnLWXtag5Jt8wYp7NF8F3Tear1QSaDRl9gnM34JZVXdLFV';\r\nconst apiConfig = {\r\n    headers: {\r\n        'x-api-key': apiKey\r\n    }\r\n}\r\nconst serverUrl = 'https://deep-index.moralis.io/api/v2';\r\n\r\nexport const getTokenPrice = async function (_chain, _tokenAddress) {\r\n    let price;\r\n    try {\r\n        price = await axios.get(`${serverUrl}/erc20/${_tokenAddress}/price?chain=${_chain}`, apiConfig);\r\n    } catch (e) {\r\n        price = 0;\r\n    }\r\n    return price && price.data;\r\n}\r\n\r\nexport const getTokenMetadata = async function (_chain, _tokenAddress) {\r\n    const tokenMetadata = await axios.get(`${serverUrl}/erc20/metadata?chain=${_chain}&addresses=${_tokenAddress}`, apiConfig);\r\n    return tokenMetadata.data;\r\n}\r\n\r\nexport const getTokenBalance = async function (_chain, _tokenAddress, _walletAddress) {\r\n    const balances = await axios.get(`${serverUrl}/${_walletAddress}/erc20?chain=${_chain}&token_addresses=${_tokenAddress}`, apiConfig);\r\n    return balances.data;\r\n}\r\n\r\nexport const runContractFunction = async function (_chain, _contractAddress, _functionName, _abi, _params) {\r\n    let result;\r\n    try {\r\n        result = await axios.post(`${serverUrl}/${_contractAddress}/function?chain=${_chain}&function_name=${_functionName}`, {\r\n            \"abi\": _abi,\r\n            \"params\": _params\r\n        }, apiConfig);\r\n    } catch (e) {\r\n        result = null;\r\n    }\r\n    return result ? result.data : result;\r\n}\r\n\r\nexport const getCurrentFee = async function (_chain, _tokenAddress, _walletAddress) {\r\n    const dynamicFeeAbi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getDynamicFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    if (await isExcludedFromFee(_chain, _tokenAddress, _walletAddress)) return 0;\r\n    const dynamicFee = await runContractFunction(_chain, _tokenAddress, 'getDynamicFee', dynamicFeeAbi, {from:_walletAddress});\r\n    return dynamicFee;\r\n}\r\n\r\nexport const isExcludedFromFee = async function (_chain, _tokenAddress, _walletAddress) {\r\n    const isExcludedFromFeeAbi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    return await runContractFunction(_chain, _tokenAddress, 'isExcludedFromFee', isExcludedFromFeeAbi, {account:_walletAddress});\r\n}\r\n\r\nexport const getCommonFee = async function (_chain, _tokenAddress) {\r\n    const liquidityAndMarketingFeeAbi = [{\"inputs\":[],\"name\":\"_liquidityAndMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    const taxFeeAbi = [{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    let commonFee = 0;\r\n    await Promise.all([\r\n        runContractFunction(_chain, _tokenAddress, '_liquidityAndMarketingFee', liquidityAndMarketingFeeAbi, {}),\r\n        runContractFunction(_chain, _tokenAddress, '_taxFee', taxFeeAbi, {})\r\n    ]).then(results => results.map(each => commonFee += Number(each)));\r\n    return commonFee;\r\n}\r\n\r\nexport const burntAndLeftTokenPercent = async function (_chain, _tokenAddress) {\r\n    const burntVsCirculatingSupplyAbi = [{\"inputs\":[],\"name\":\"burntVsCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"circulating\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    const data = await runContractFunction(_chain, _tokenAddress, 'burntVsCirculatingSupply', burntVsCirculatingSupplyAbi);\r\n    return {burnt: Number(data[0]), left: Number(data[1]), leftPercent: data[1] / (Number(data[0]) + Number(data[1])) * 100};\r\n}\r\n\r\nexport const totalFees = async function (_chain, _tokenAddress) {\r\n    const totalFeesAbi = [{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    const data = await runContractFunction(_chain, _tokenAddress, 'totalFees', totalFeesAbi);\r\n    return data;\r\n}\r\n\r\nexport const getTransactions = async function (_chain, _walletAddress) {\r\n    const transactions = await axios.get(`${serverUrl}/${_walletAddress}/erc20/transfers?chain=${_chain}&offset=0&oder=desc`, apiConfig);\r\n    return transactions.data;\r\n}\r\n\r\nexport const getLogsByAddress = async function (_chain, _tokenAddress) {\r\n    let offset = 0;\r\n    const response = await axios.get(`${serverUrl}/${_tokenAddress}/logs?chain=${_chain}&topic0=0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&offset=${offset}&oder=desc`, apiConfig);\r\n    let logs = response.data.result;\r\n    const total = response.data.total;\r\n    const pages = Math.ceil(total / 500);\r\n    let page = 1;\r\n    let getLogFunctions = [];\r\n    while (page < pages) {\r\n        offset = page * 500;\r\n        getLogFunctions.push(axios.get(`${serverUrl}/${_tokenAddress}/logs?chain=${_chain}&topic0=0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&offset=${offset}&oder=desc`, apiConfig));\r\n        page++;\r\n    }\r\n    if (getLogFunctions.length) {\r\n        await Promise.all(getLogFunctions).then(results => {\r\n            results.map(each => {\r\n                logs = logs.concat(each.data.result);\r\n            })\r\n        })\r\n    }\r\n    return logs;\r\n}\r\n\r\nfunction getAddress(topic) {\r\n    if (topic === null || topic === '') return '';\r\n    return `0x${topic.substring(topic.length - 40)}`;\r\n}\r\n\r\nfunction filterLogs (logs, _walletAddress) {\r\n    return logs.filter(each => getAddress(each.topic1) === _walletAddress.toLowerCase() || getAddress(each.topic2) === _walletAddress.toLowerCase());\r\n}\r\n\r\nfunction getValue(topic) {\r\n    return parseInt(topic, 16);\r\n}\r\n\r\nasync function calculateBuySell(logs, _chain, _tokenAddress, _walletAddress) {\r\n    let buy = 0, sell = 0, isFee = true;\r\n    if (await isExcludedFromFee(_chain, _tokenAddress, _walletAddress)) isFee = false;\r\n    logs.map(each => {\r\n        if (getAddress(each.topic1) === _walletAddress.toLowerCase()) {\r\n            if (isFee) {\r\n                sell += getValue(each.data) / 97 * 100;\r\n            } else {\r\n                sell += getValue(each.data);\r\n            }\r\n        } else buy += getValue(each.data);\r\n    })\r\n    let result = {buy: buy, sell: sell};\r\n    return result;\r\n}\r\n\r\nexport const walletExchange = async function(_chain, _tokenAddress, _walletAddress) {\r\n    let logs;\r\n    await getLogsByAddress(_chain, _tokenAddress).then(data=> {\r\n        logs = filterLogs(data, _walletAddress);\r\n    })\r\n    return await calculateBuySell(logs, _chain, _tokenAddress, _walletAddress);\r\n}"],"sourceRoot":""}